
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package usuario;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\005\000\002\004\002\000\002\004\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\004\006\004\001\002\000\014\003\010\007" +
    "\uffff\010\013\011\011\012\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\000\001\002\000\004\004\034\001" +
    "\002\000\004\005\032\001\002\000\004\004\027\001\002" +
    "\000\004\007\026\001\002\000\004\004\014\001\002\000" +
    "\014\010\022\011\021\012\016\013\020\014\015\001\002" +
    "\000\006\005\ufff4\007\ufff4\001\002\000\006\005\ufff6\007" +
    "\ufff6\001\002\000\006\005\023\007\ufffa\001\002\000\006" +
    "\005\ufff5\007\ufff5\001\002\000\006\005\ufff7\007\ufff7\001" +
    "\002\000\006\005\ufff8\007\ufff8\001\002\000\014\003\010" +
    "\007\uffff\010\013\011\011\012\007\001\002\000\004\007" +
    "\ufffe\001\002\000\004\007\ufff9\001\002\000\004\002\001" +
    "\001\002\000\004\014\030\001\002\000\006\005\023\007" +
    "\ufffa\001\002\000\004\007\ufffd\001\002\000\014\003\010" +
    "\007\uffff\010\013\011\011\012\007\001\002\000\004\007" +
    "\ufffb\001\002\000\004\014\035\001\002\000\006\005\023" +
    "\007\ufffa\001\002\000\004\007\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\004\002\004\001\001\000\004\003\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\030\001\001\000\002" +
    "\001\001\000\004\003\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\035\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



protected String usuarioEntrada;
public parser(lexico entrada,String usuarioEntrada){
	super(entrada);	
	this.usuarioEntrada = usuarioEntrada;
}

public void report_error(String message, Object info) {
	StringBuffer m = new StringBuffer("Error");
	if(info instanceof java_cup.runtime.Symbol){
		java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
		if(s.left >=0){
			m.append("en linea "+(s.left+1));
			if(s.right >=0){
				m.append("columna "+(s.right+1));
			}
		}
		m.append(": "+message);
	}
	//System.out.println(m);
}
public void syntax_error(Symbol cur_token){
	String salida = "Error sintactico token : "+symbl_name_from_id(cur_token.sym);	
    salida+=" Fila: "+(cur_token.left+1);
    salida+=" Columna: "+(cur_token.right+1);
    if(cur_token.value!=null)salida+=" Valor: "+cur_token.value.toString();
    //reporte.agregarReporte("error",salida);
    //Systemm.out.println(salida);
}
public void report_fatal_error(String message, Object info) {
	//Systemm.out.println("Error sin recuperacion");
}
private List <String> parametrosSolicitud = new ArrayList<>();
private List<String> datosSolicitud = new ArrayList<>();

private void limpiarAuxiliares(){
	parametrosSolicitud.clear();
	datosSolicitud.clear();
}
public Usuario usuario = null;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S0 ::= LLAVE_ABIERTA S1 LLAVE_CERRADA 
            {
              Object RESULT =null;
		//RECUPERACION_USUARIO  
			if(ManejadorUsuario.parametrosVerificador
			("RECUPERACION_USUARIO", parametrosSolicitud))
				 {				 
				 	usuario = ManejadorUsuario.recuperacionUsuario
				 	(parametrosSolicitud,datosSolicitud,usuarioEntrada);	
				 }else {
				 //System.out.println("--No agrego solicitud : recuperacionUsuario --");
				 }
				 //System.out.println("--Analisis recuperacionUsuario exitosa--");
				 limpiarAuxiliares();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S1 ::= PASSWORD DOS_PUNTOS cualquierCosaSinEspacios S2 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	//System.out.println("PASSWORD ACEPTADO: "+D);
	parametrosSolicitud.add("PASSWORD");
	datosSolicitud.add(D.toString());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S1 ::= FECHA_CREACION DOS_PUNTOS FECHA S2 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	//System.out.println("FECHA_CREACION ACEPTADO: "+D);
	parametrosSolicitud.add("FECHA_CREACION");
	datosSolicitud.add(D.toString());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S1 ::= FECHA_MODIFICACION DOS_PUNTOS FECHA S2 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	//System.out.println("FECHA_MODIFICACION ACEPTADO: "+D);
	parametrosSolicitud.add("FECHA_MODIFICACION");
	datosSolicitud.add(D.toString());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S1 ::= error COMA S1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S2 ::= COMA S1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cualquierCosaSinEspacios ::= PASSWORD 
            {
              String RESULT =null;
		RESULT="PASSWORD";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cualquierCosaSinEspacios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cualquierCosaSinEspacios ::= FECHA_CREACION 
            {
              String RESULT =null;
		RESULT="FECHA_CREACION";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cualquierCosaSinEspacios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cualquierCosaSinEspacios ::= FECHA_MODIFICACION 
            {
              String RESULT =null;
		RESULT="FECHA_MODIFICACION";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cualquierCosaSinEspacios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cualquierCosaSinEspacios ::= CUALQUIER_COSA_SIN_ESPACIOS 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cualquierCosaSinEspacios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cualquierCosaSinEspacios ::= FECHA 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cualquierCosaSinEspacios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

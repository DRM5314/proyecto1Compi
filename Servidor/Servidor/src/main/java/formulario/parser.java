
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package formulario;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import componente.ManejadorComponente;
import componente.Componente;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\005\000\002\003" +
    "\002\000\002\003\003\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\010\000\002\004\005\000\002\005\002\000\002" +
    "\005\004\000\002\006\005\000\002\006\007\000\002\010" +
    "\002\000\002\010\004\000\002\007\006\000\002\007\006" +
    "\000\002\007\006\000\002\007\006\000\002\007\006\000" +
    "\002\007\006\000\002\007\006\000\002\007\006\000\002" +
    "\007\006\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\007\005\000\002\011\002\000\002\011\004" +
    "\000\002\012\003\000\002\012\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\016\005\001\002\000\004\002\211\001" +
    "\002\000\022\003\012\007\007\010\014\011\011\012\006" +
    "\017\uffff\033\010\043\013\001\002\000\004\004\206\001" +
    "\002\000\004\004\203\001\002\000\004\004\100\001\002" +
    "\000\004\004\075\001\002\000\004\005\073\001\002\000" +
    "\004\004\070\001\002\000\004\004\020\001\002\000\004" +
    "\017\ufffe\001\002\000\004\017\017\001\002\000\004\002" +
    "\000\001\002\000\106\004\025\005\043\006\051\007\033" +
    "\010\024\011\050\012\047\013\037\014\045\015\023\016" +
    "\032\017\056\020\053\021\035\022\040\023\036\024\027" +
    "\025\063\026\022\027\034\030\052\031\062\032\064\033" +
    "\026\034\031\035\055\036\021\037\061\040\060\041\044" +
    "\042\042\043\046\044\030\045\041\001\002\000\006\005" +
    "\uffc3\017\uffc3\001\002\000\006\005\uffcb\017\uffcb\001\002" +
    "\000\006\005\uffd4\017\uffd4\001\002\000\006\005\uffd9\017" +
    "\uffd9\001\002\000\006\005\uffdd\017\uffdd\001\002\000\006" +
    "\005\uffc6\017\uffc6\001\002\000\006\005\uffcd\017\uffcd\001" +
    "\002\000\006\005\uffbd\017\uffbd\001\002\000\006\005\uffc5" +
    "\017\uffc5\001\002\000\006\005\uffd3\017\uffd3\001\002\000" +
    "\006\005\uffda\017\uffda\001\002\000\006\005\uffca\017\uffca" +
    "\001\002\000\006\005\uffd0\017\uffd0\001\002\000\006\005" +
    "\uffce\017\uffce\001\002\000\006\005\uffd6\017\uffd6\001\002" +
    "\000\006\005\uffcf\017\uffcf\001\002\000\006\005\uffdf\017" +
    "\uffdf\001\002\000\006\005\uffbf\017\uffbf\001\002\000\006" +
    "\005\uffdc\017\uffdc\001\002\000\006\005\uffc0\017\uffc0\001" +
    "\002\000\006\005\uffd5\017\uffd5\001\002\000\006\005\uffbe" +
    "\017\uffbe\001\002\000\006\005\uffd7\017\uffd7\001\002\000" +
    "\006\005\uffd8\017\uffd8\001\002\000\006\005\uffdb\017\uffdb" +
    "\001\002\000\006\005\uffc9\017\uffc9\001\002\000\006\005" +
    "\uffd1\017\uffd1\001\002\000\006\005\065\017\ufff6\001\002" +
    "\000\006\005\uffc4\017\uffc4\001\002\000\006\005\uffd2\017" +
    "\uffd2\001\002\000\006\005\uffde\017\uffde\001\002\000\006" +
    "\005\uffc1\017\uffc1\001\002\000\006\005\uffc2\017\uffc2\001" +
    "\002\000\006\005\uffc8\017\uffc8\001\002\000\006\005\uffcc" +
    "\017\uffcc\001\002\000\006\005\uffc7\017\uffc7\001\002\000" +
    "\020\003\012\007\007\010\014\011\011\012\006\033\010" +
    "\043\013\001\002\000\004\017\ufffc\001\002\000\004\017" +
    "\ufff5\001\002\000\004\044\071\001\002\000\006\005\065" +
    "\017\ufff6\001\002\000\004\017\ufff9\001\002\000\022\003" +
    "\012\007\007\010\014\011\011\012\006\017\uffff\033\010" +
    "\043\013\001\002\000\004\017\ufff7\001\002\000\004\015" +
    "\076\001\002\000\006\005\065\017\ufff6\001\002\000\004" +
    "\017\ufffb\001\002\000\004\034\101\001\002\000\004\016" +
    "\103\001\002\000\006\005\175\035\176\001\002\000\034" +
    "\003\117\013\115\020\104\021\110\022\114\024\113\025" +
    "\112\026\120\030\107\032\106\037\105\040\111\041\116" +
    "\001\002\000\004\004\172\001\002\000\004\004\167\001" +
    "\002\000\004\004\164\001\002\000\004\004\161\001\002" +
    "\000\004\004\156\001\002\000\004\004\153\001\002\000" +
    "\004\004\146\001\002\000\004\004\143\001\002\000\004" +
    "\004\140\001\002\000\004\004\135\001\002\000\004\004" +
    "\132\001\002\000\004\005\130\001\002\000\004\004\123" +
    "\001\002\000\004\017\122\001\002\000\006\005\ufff4\035" +
    "\ufff4\001\002\000\004\027\124\001\002\000\006\005\126" +
    "\017\uffe3\001\002\000\004\017\uffeb\001\002\000\034\003" +
    "\117\013\115\020\104\021\110\022\114\024\113\025\112" +
    "\026\120\030\107\032\106\037\105\040\111\041\116\001" +
    "\002\000\004\017\uffe2\001\002\000\034\003\117\013\115" +
    "\020\104\021\110\022\114\024\113\025\112\026\120\030" +
    "\107\032\106\037\105\040\111\041\116\001\002\000\004" +
    "\017\uffe4\001\002\000\106\004\025\005\043\006\051\007" +
    "\033\010\024\011\050\012\047\013\037\014\045\015\023" +
    "\016\032\017\056\020\053\021\035\022\040\023\036\024" +
    "\027\025\063\026\022\027\034\030\052\031\062\032\064" +
    "\033\026\034\031\035\055\036\021\037\061\040\060\041" +
    "\044\042\042\043\046\044\030\045\041\001\002\000\006" +
    "\005\126\017\uffe3\001\002\000\004\017\uffe6\001\002\000" +
    "\004\014\136\001\002\000\006\005\126\017\uffe3\001\002" +
    "\000\004\017\ufff0\001\002\000\004\023\141\001\002\000" +
    "\006\005\126\017\uffe3\001\002\000\004\017\uffed\001\002" +
    "\000\004\042\144\001\002\000\006\005\126\017\uffe3\001" +
    "\002\000\004\017\uffe5\001\002\000\110\004\025\005\043" +
    "\006\051\007\033\010\024\011\050\012\047\013\037\014" +
    "\045\015\023\016\032\017\056\020\053\021\035\022\040" +
    "\023\036\024\027\025\063\026\022\027\034\030\052\031" +
    "\062\032\064\033\026\034\031\035\055\036\021\037\061" +
    "\040\060\041\044\042\042\043\046\044\030\045\041\046" +
    "\150\001\002\000\006\005\126\017\uffe3\001\002\000\006" +
    "\005\uffe1\017\uffe1\001\002\000\006\005\uffe0\017\uffe0\001" +
    "\002\000\004\017\uffec\001\002\000\004\042\154\001\002" +
    "\000\006\005\126\017\uffe3\001\002\000\004\017\uffe7\001" +
    "\002\000\004\014\157\001\002\000\006\005\126\017\uffe3" +
    "\001\002\000\004\017\uffee\001\002\000\004\031\162\001" +
    "\002\000\006\005\126\017\uffe3\001\002\000\004\017\uffea" +
    "\001\002\000\004\036\165\001\002\000\006\005\126\017" +
    "\uffe3\001\002\000\004\017\uffe9\001\002\000\004\042\170" +
    "\001\002\000\006\005\126\017\uffe3\001\002\000\004\017" +
    "\uffe8\001\002\000\110\004\025\005\043\006\051\007\033" +
    "\010\024\011\050\012\047\013\037\014\045\015\023\016" +
    "\032\017\056\020\053\021\035\022\040\023\036\024\027" +
    "\025\063\026\022\027\034\030\052\031\062\032\064\033" +
    "\026\034\031\035\055\036\021\037\061\040\060\041\044" +
    "\042\042\043\046\044\030\045\041\046\150\001\002\000" +
    "\006\005\126\017\uffe3\001\002\000\004\017\uffef\001\002" +
    "\000\004\016\200\001\002\000\006\005\065\017\ufff6\001" +
    "\002\000\004\017\ufff8\001\002\000\034\003\117\013\115" +
    "\020\104\021\110\022\114\024\113\025\112\026\120\030" +
    "\107\032\106\037\105\040\111\041\116\001\002\000\004" +
    "\017\202\001\002\000\006\005\ufff3\035\ufff3\001\002\000" +
    "\110\004\025\005\043\006\051\007\033\010\024\011\050" +
    "\012\047\013\037\014\045\015\023\016\032\017\056\020" +
    "\053\021\035\022\040\023\036\024\027\025\063\026\022" +
    "\027\034\030\052\031\062\032\064\033\026\034\031\035" +
    "\055\036\021\037\061\040\060\041\044\042\042\043\046" +
    "\044\030\045\041\046\150\001\002\000\006\005\065\017" +
    "\ufff6\001\002\000\004\017\ufffd\001\002\000\106\004\025" +
    "\005\043\006\051\007\033\010\024\011\050\012\047\013" +
    "\037\014\045\015\023\016\032\017\056\020\053\021\035" +
    "\022\040\023\036\024\027\025\063\026\022\027\034\030" +
    "\052\031\062\032\064\033\026\034\031\035\055\036\021" +
    "\037\061\040\060\041\044\042\042\043\046\044\030\045" +
    "\041\001\002\000\006\005\065\017\ufff6\001\002\000\004" +
    "\017\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\015\004\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\053\014" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\071\001\001\000\002\001\001\000\006\003\073\004" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\101\001\001\000\002\001\001\000\004\007\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\124\001\001\000\002\001\001\000\004" +
    "\007\126\001\001\000\002\001\001\000\004\007\130\001" +
    "\001\000\002\001\001\000\006\013\132\014\056\001\001" +
    "\000\004\011\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\144\001\001\000\002\001\001" +
    "\000\010\012\146\013\150\014\056\001\001\000\004\011" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\170\001\001\000\002\001\001\000\010\012\172\013\150" +
    "\014\056\001\001\000\004\011\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\176\001\001\000\002" +
    "\001\001\000\004\007\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\203\013\150\014\056\001\001" +
    "\000\004\005\204\001\001\000\002\001\001\000\006\013" +
    "\206\014\056\001\001\000\004\005\207\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



private String idFormulario;
public parser(lexico entrada,String nombreFormulario){
	super(entrada);	
	this.idFormulario = nombreFormulario;
}

public void report_error(String message, Object info) {
	StringBuffer m = new StringBuffer("Error");
	if(info instanceof java_cup.runtime.Symbol){
		java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
		if(s.left >=0){
			m.append("en linea "+(s.left+1));
			if(s.right >=0){
				m.append("columna "+(s.right+1));
			}
		}
		m.append(": "+message);
	}
	//System.out.println(m);
}
public void syntax_error(Symbol cur_token){
	String salida = "Error sintactico token : "+symbl_name_from_id(cur_token.sym);	
    salida+=" Fila: "+(cur_token.left+1);
    salida+=" Columna: "+(cur_token.right+1);
    if(cur_token.value!=null)salida+=" Valor: "+cur_token.value.toString();
    //reporte.agregarReporte("error",salida);
    //System.out.println(salida);
}
public void report_fatal_error(String message, Object info) {
	//System.out.println("Error sin recuperacion");
}
private List <String> parametrosSolicitud = new ArrayList<>();
private List<String> datosSolicitud = new ArrayList<>();

private void limpiarAuxiliares(){
	parametrosSolicitud.clear();
	datosSolicitud.clear();
}
private List <ManejadorParser> instrucciones = new ArrayList<>();
public List <ManejadorParser> getInstrucciones (){
	return this.instrucciones;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S0 ::= LLAVE_ABIERTA S1 LLAVE_CERRADA 
            {
              Object RESULT =null;
		//RECUPERACION_FORMULARIO FORMULARIO 
			if(ManejadorFormulario.parametrosVerificador
			("RECUPERACION_FORMULARIO", parametrosSolicitud))
				 {
				 	instrucciones.add(new ManejadorParser("RECUPERACION_FORMULARIO", datosSolicitud, parametrosSolicitud));	
				 }else {
				 //System.out.println("--No agrego solicitud : recuperacionFormulario --");
				 }
				 //System.out.println("--Analisis recuperacionFormulario exitosa--");
				 limpiarAuxiliares();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S1 ::= S2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S2 ::= TITULO DOS_PUNTOS S8 S3 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("TITULO ACEPTADO: "+D);
		parametrosSolicitud.add("TITULO");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S2 ::= NOMBRE DOS_PUNTOS cosasSinEspacios S3 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("NOMBRE ACEPTADO: "+D);
		parametrosSolicitud.add("NOMBRE");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S2 ::= TEMA DOS_PUNTOS TEMA_PARAMETRO S3 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("TEMA ACEPTADO: "+D);
		parametrosSolicitud.add("TEMA");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S2 ::= USUARIO_CREACION DOS_PUNTOS cosasSinEspacios S3 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("USUARIO_CREACION ACEPTADO: "+D);
		parametrosSolicitud.add("USUARIO_CREACION");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S2 ::= FECHA_CREACION DOS_PUNTOS FECHA S3 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("FECHA_CREACION ACEPTADO: "+D);
		parametrosSolicitud.add("FECHA_CREACION");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S2 ::= ESTRUCTURA DOS_PUNTOS PARENTESIS_ABIERTO S4 PARENTESIS_CERRADO S3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S2 ::= error COMA S1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S3 ::= COMA S2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S4 ::= LLAVE_ABIERTA S5 LLAVE_CERRADA 
            {
              Object RESULT =null;
						
			if(ManejadorComponente.parametrosVerificador
			("RECUPERACION_COMPONENTE",datosSolicitud ,parametrosSolicitud))
				 {
					instrucciones.add(new ManejadorParser("RECUPERACION_COMPONENTE", datosSolicitud, parametrosSolicitud));
				 }else {
				 	//System.out.println("--No agrego solicitud : recuperacionComponente --");
				 }
				 //System.out.println("--Analisis recuperacionComponente exitosa--");		
				 limpiarAuxiliares();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S4",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S4 ::= S4 COMA LLAVE_ABIERTA S5 LLAVE_CERRADA 
            {
              Object RESULT =null;
						
			if(ManejadorComponente.parametrosVerificador
			("RECUPERACION_COMPONENTE",datosSolicitud ,parametrosSolicitud))
				 {
				 	instrucciones.add(new ManejadorParser("RECUPERACION_COMPONENTE", datosSolicitud, parametrosSolicitud));
				 }else {
				 	//System.out.println("--No agrego solicitud : recuperacionComponente --");
				 }
				 //System.out.println("--Analisis recuperacionComponente exitosa--");
				 limpiarAuxiliares();			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S4",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S6 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S6",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S6 ::= COMA S4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S6",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S5 ::= ID DOS_PUNTOS ID_PARAMETRO S7 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("ID ACEPTADO: "+D.toString());
		parametrosSolicitud.add("ID");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // S5 ::= NOMBRE_CAMPO DOS_PUNTOS S8 S7 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("NOMBRE_CAMPO ACEPTADO: "+D.toString());
		parametrosSolicitud.add("NOMBRE_CAMPO");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S5 ::= FORMULARIO DOS_PUNTOS ID_PARAMETRO S7 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("FORMULARIO ACEPTADO: "+D.toString());
		parametrosSolicitud.add("FORMULARIO");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // S5 ::= CLASE DOS_PUNTOS CLASE_PARAMETRO S7 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("CLASE ACEPTADO: "+D.toString());
		parametrosSolicitud.add("CLASE");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // S5 ::= TEXTO_VISIBLE DOS_PUNTOS S8 S7 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("TEXTO_VISIBLE ACEPTADO: "+D.toString());
		parametrosSolicitud.add("TEXTO_VISIBLE");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // S5 ::= ALINEACION DOS_PUNTOS ALINEACION_PARAMETRO S7 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("ALINEACION ACEPTADO: "+D.toString());
		parametrosSolicitud.add("ALINEACION");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // S5 ::= REQUERIDO DOS_PUNTOS REQUERIDO_PARAMETRO S7 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("REQUERIDO ACEPTADO: "+D.toString());
		parametrosSolicitud.add("REQUERIDO");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // S5 ::= OPCIONES DOS_PUNTOS OPCIONES_PARAMETRO S7 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("OPCIONES ACEPTADO: "+D.toString());
		parametrosSolicitud.add("OPCIONES");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // S5 ::= FILAS DOS_PUNTOS DIGITO S7 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("FILAS ACEPTADO: "+D.toString());
		parametrosSolicitud.add("FILAS");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // S5 ::= COLUMNAS DOS_PUNTOS DIGITO S7 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("COLUMNAS ACEPTADO: "+D.toString());
		parametrosSolicitud.add("COLUMNAS");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // S5 ::= URL DOS_PUNTOS cosasSinEspacios S7 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("URL ACEPTADO: "+D.toString());
		parametrosSolicitud.add("URL");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // S5 ::= INDICE DOS_PUNTOS DIGITO S7 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("INDICE ACEPTADO: "+D.toString());
		parametrosSolicitud.add("INDICE");
		datosSolicitud.add(D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // S5 ::= error COMA S5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // S7 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // S7 ::= COMA S5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S7",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // S8 ::= CUALQUIER_COSA_CON_ESPACIOS 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // S8 ::= cosasSinEspacios 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cosasSinEspacios ::= CUALQUIER_COSA_SIN_ESPACIOS 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosasSinEspacios",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cosasSinEspacios ::= reservadas 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosasSinEspacios",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // reservadas ::= DOS_PUNTOS 
            {
              String RESULT =null;
		RESULT=":";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // reservadas ::= COMA 
            {
              String RESULT =null;
		RESULT=",";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // reservadas ::= ID_FORMULARIO 
            {
              String RESULT =null;
		RESULT="ID_FORMULARIO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // reservadas ::= TITULO 
            {
              String RESULT =null;
		RESULT="TITULO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // reservadas ::= NOMBRE 
            {
              String RESULT =null;
		RESULT="NOMBRE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // reservadas ::= TEMA 
            {
              String RESULT =null;
		RESULT="TEMA";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // reservadas ::= USUARIO_CREACION 
            {
              String RESULT =null;
		RESULT="USUARIO_CREACION";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // reservadas ::= ID 
            {
              String RESULT =null;
		RESULT="ID";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // reservadas ::= ID_PARAMETRO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // reservadas ::= TEMA_PARAMETRO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // reservadas ::= LLAVE_ABIERTA 
            {
              String RESULT =null;
		RESULT="{";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // reservadas ::= LLAVE_CERRADA 
            {
              String RESULT =null;
		RESULT="}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // reservadas ::= NOMBRE_CAMPO 
            {
              String RESULT =null;
		RESULT="NOMBRE_CAMPO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // reservadas ::= FORMULARIO 
            {
              String RESULT =null;
		RESULT="FORMULARIO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // reservadas ::= CLASE 
            {
              String RESULT =null;
		RESULT="CLASE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // reservadas ::= CLASE_PARAMETRO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // reservadas ::= INDICE 
            {
              String RESULT =null;
		RESULT="INDICE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // reservadas ::= TEXTO_VISIBLE 
            {
              String RESULT =null;
		RESULT="TEXTO_VISIBLE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // reservadas ::= ALINEACION 
            {
              String RESULT =null;
		RESULT="ALINEACION";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // reservadas ::= ALINEACION_PARAMETRO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // reservadas ::= REQUERIDO 
            {
              String RESULT =null;
		RESULT="REQUERIDO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // reservadas ::= REQUERIDO_PARAMETRO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // reservadas ::= OPCIONES 
            {
              String RESULT =null;
		RESULT="OPCIONES";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // reservadas ::= ESTRUCTURA 
            {
              String RESULT =null;
		RESULT="ESTRUCTURA";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // reservadas ::= PARENTESIS_ABIERTO 
            {
              String RESULT =null;
		RESULT="(";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // reservadas ::= PARENTESIS_CERRADO 
            {
              String RESULT =null;
		RESULT=")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // reservadas ::= OPCIONES_PARAMETRO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // reservadas ::= FILAS 
            {
              String RESULT =null;
		RESULT="FILAS";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // reservadas ::= COLUMNAS 
            {
              String RESULT =null;
		RESULT="COLUMNAS";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // reservadas ::= URL 
            {
              String RESULT =null;
		RESULT="URL";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // reservadas ::= DIGITO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // reservadas ::= FECHA_CREACION 
            {
              String RESULT =null;
		RESULT="FECHA_CREACION";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // reservadas ::= FECHA 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

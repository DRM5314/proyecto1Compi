
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package solicitudes;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import solicitudes.Solicitudes;
import usuario.ManejadorUsuario;
import formulario.ManejadorFormulario;
import componente.ManejadorComponente;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\340\000\002\002\004\000\002\002\013\000\002\002" +
    "\003\000\002\002\004\000\002\003\003\000\002\003\004" +
    "\000\002\004\007\000\002\004\005\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\103\006\000\002\103\006\000\002\103\006\000\002\103" +
    "\006\000\002\042\011\000\002\042\005\000\002\044\003" +
    "\000\002\044\005\000\002\043\005\000\002\045\011\000" +
    "\002\045\005\000\002\047\003\000\002\047\005\000\002" +
    "\046\005\000\002\050\011\000\002\050\005\000\002\052" +
    "\003\000\002\052\005\000\002\051\005\000\002\053\011" +
    "\000\002\053\005\000\002\055\003\000\002\055\005\000" +
    "\002\054\005\000\002\101\006\000\002\101\006\000\002" +
    "\101\006\000\002\056\011\000\002\056\005\000\002\060" +
    "\003\000\002\060\005\000\002\057\005\000\002\061\011" +
    "\000\002\061\005\000\002\063\003\000\002\063\005\000" +
    "\002\062\005\000\002\064\011\000\002\064\005\000\002" +
    "\066\003\000\002\066\005\000\002\065\005\000\002\102" +
    "\006\000\002\102\006\000\002\102\006\000\002\067\011" +
    "\000\002\067\005\000\002\071\003\000\002\071\005\000" +
    "\002\070\005\000\002\072\011\000\002\072\005\000\002" +
    "\074\003\000\002\074\005\000\002\073\005\000\002\075" +
    "\011\000\002\075\005\000\002\077\003\000\002\077\005" +
    "\000\002\076\005\000\002\007\010\000\002\005\007\000" +
    "\002\041\005\000\002\006\006\000\002\010\006\000\002" +
    "\010\006\000\002\010\004\000\002\010\005\000\002\010" +
    "\005\000\002\011\002\000\002\011\004\000\002\012\006" +
    "\000\002\012\006\000\002\012\006\000\002\012\006\000" +
    "\002\012\005\000\002\012\005\000\002\013\002\000\002" +
    "\013\004\000\002\014\005\000\002\015\004\000\002\015" +
    "\006\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\004\000\002\015\005\000\002\015\005\000" +
    "\002\016\002\000\002\016\004\000\002\017\005\000\002" +
    "\020\006\000\002\020\006\000\002\020\006\000\002\020" +
    "\006\000\002\020\005\000\002\020\005\000\002\021\002" +
    "\000\002\021\004\000\002\022\004\000\002\022\006\000" +
    "\002\022\006\000\002\022\006\000\002\022\006\000\002" +
    "\022\006\000\002\022\006\000\002\022\006\000\002\022" +
    "\006\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\022\005\000\002\022\005\000\002\104\005\000" +
    "\002\024\005\000\002\023\002\000\002\023\004\000\002" +
    "\025\006\000\002\026\013\000\002\027\002\000\002\027" +
    "\003\000\002\030\004\000\002\031\002\000\002\031\004" +
    "\000\002\032\003\000\002\032\007\000\002\033\006\000" +
    "\002\034\003\000\002\034\003\000\002\035\002\000\002" +
    "\035\004\000\002\036\003\000\002\036\003\000\002\036" +
    "\004\000\002\036\003\000\002\036\004\000\002\036\004" +
    "\000\002\037\002\000\002\037\004\000\002\040\003\000" +
    "\002\040\003\000\002\106\003\000\002\106\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0203\000\006\003\005\005\004\001\002\000\004\007" +
    "\u01fc\001\002\000\006\004\012\005\011\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\011\u01f9\001\002\000\004\002\ufffe" +
    "\001\002\000\006\003\015\005\014\001\002\000\004\007" +
    "\017\001\002\000\004\005\011\001\002\000\010\002\ufffa" +
    "\003\ufffa\005\ufffa\001\002\000\004\010\020\001\002\000" +
    "\004\012\021\001\002\000\030\016\032\024\023\025\022" +
    "\026\035\030\025\031\026\032\030\034\034\035\024\036" +
    "\031\040\027\001\002\000\004\006\u01e3\001\002\000\004" +
    "\006\u01b9\001\002\000\004\006\u01a6\001\002\000\004\006" +
    "\u0178\001\002\000\004\006\u0162\001\002\000\004\006\u012d" +
    "\001\002\000\004\006\u0103\001\002\000\004\006\360\001" +
    "\002\000\004\006\335\001\002\000\010\002\ufffb\003\ufffb" +
    "\005\ufffb\001\002\000\004\006\220\001\002\000\004\006" +
    "\042\001\002\000\010\002\ufff6\003\ufff6\005\ufff6\001\002" +
    "\000\010\002\ufff7\003\ufff7\005\ufff7\001\002\000\010\002" +
    "\ufff8\003\ufff8\005\ufff8\001\002\000\010\002\ufff9\003\ufff9" +
    "\005\ufff9\001\002\000\006\003\044\017\045\001\002\000" +
    "\004\005\011\001\002\000\004\013\215\001\002\000\004" +
    "\021\046\001\002\000\004\012\047\001\002\000\004\022" +
    "\050\001\002\000\004\017\053\001\002\000\004\023\213" +
    "\001\002\000\010\005\uffe0\013\211\023\uffe0\001\002\000" +
    "\012\003\056\041\057\042\055\043\061\001\002\000\004" +
    "\020\210\001\002\000\004\012\205\001\002\000\006\012" +
    "\202\013\201\001\002\000\004\012\177\001\002\000\006" +
    "\013\173\020\uffb0\001\002\000\004\012\062\001\002\000" +
    "\216\005\067\006\104\007\107\010\125\011\140\012\112" +
    "\013\123\014\164\015\072\016\114\017\150\020\135\021" +
    "\153\022\073\023\063\024\105\025\110\026\136\027\162" +
    "\030\134\031\120\032\070\033\146\034\171\035\100\036" +
    "\151\037\143\040\066\041\160\042\142\043\102\044\154" +
    "\045\127\046\064\047\074\050\116\051\075\052\155\053" +
    "\071\054\131\055\077\056\076\060\106\061\132\062\117" +
    "\063\130\064\101\065\165\066\111\067\166\070\172\071" +
    "\161\072\122\073\103\074\156\075\115\076\137\077\144" +
    "\100\121\101\170\102\145\103\147\104\126\105\141\106" +
    "\167\107\113\110\133\111\065\113\152\116\124\001\002" +
    "\000\006\013\uff58\020\uff58\001\002\000\006\013\uff45\020" +
    "\uff45\001\002\000\006\013\uff68\020\uff68\001\002\000\006" +
    "\013\uff4b\020\uff4b\001\002\000\006\013\uff66\020\uff66\001" +
    "\002\000\006\013\uff51\020\uff51\001\002\000\006\013\uff40" +
    "\020\uff40\001\002\000\006\013\uff5e\020\uff5e\001\002\000" +
    "\006\013\uff59\020\uff59\001\002\000\006\013\uff44\020\uff44" +
    "\001\002\000\006\013\uff42\020\uff42\001\002\000\006\013" +
    "\uff3d\020\uff3d\001\002\000\006\013\uff3e\020\uff3e\001\002" +
    "\000\006\013\uff4e\020\uff4e\001\002\000\006\013\uff38\020" +
    "\uff38\001\002\000\006\013\uff48\020\uff48\001\002\000\006" +
    "\013\uff31\020\uff31\001\002\000\006\013\uff65\020\uff65\001" +
    "\002\000\006\013\uff57\020\uff57\001\002\000\006\013\uff3c" +
    "\020\uff3c\001\002\000\006\013\uff64\020\uff64\001\002\000" +
    "\006\013\uff56\020\uff56\001\002\000\006\013\uff36\020\uff36" +
    "\001\002\000\006\013\uff61\020\uff61\001\002\000\006\013" +
    "\uff25\020\uff25\001\002\000\006\013\uff5d\020\uff5d\001\002" +
    "\000\006\013\uff2f\020\uff2f\001\002\000\006\013\uff43\020" +
    "\uff43\001\002\000\006\013\uff3a\020\uff3a\001\002\000\006" +
    "\013\uff52\020\uff52\001\002\000\006\013\uff2c\020\uff2c\001" +
    "\002\000\006\013\uff32\020\uff32\001\002\000\006\013\uff60" +
    "\020\uff60\001\002\000\006\013\uff22\020\uff22\001\002\000" +
    "\006\013\uff63\020\uff63\001\002\000\006\013\uff28\020\uff28" +
    "\001\002\000\006\013\uff46\020\uff46\001\002\000\006\013" +
    "\uff39\020\uff39\001\002\000\006\013\uff3f\020\uff3f\001\002" +
    "\000\006\013\uff3b\020\uff3b\001\002\000\006\013\uff24\020" +
    "\uff24\001\002\000\006\013\uff53\020\uff53\001\002\000\006" +
    "\013\uff5b\020\uff5b\001\002\000\006\013\uff55\020\uff55\001" +
    "\002\000\006\013\uff2e\020\uff2e\001\002\000\006\013\uff62" +
    "\020\uff62\001\002\000\006\013\uff27\020\uff27\001\002\000" +
    "\006\013\uff49\020\uff49\001\002\000\006\013\uff4c\020\uff4c" +
    "\001\002\000\006\013\uff2d\020\uff2d\001\002\000\006\013" +
    "\uff2a\020\uff2a\001\002\000\006\013\uff50\020\uff50\001\002" +
    "\000\006\013\uff29\020\uff29\001\002\000\006\013\uff5c\020" +
    "\uff5c\001\002\000\006\013\uff4d\020\uff4d\001\002\000\006" +
    "\013\uff23\020\uff23\001\002\000\006\013\uff5a\020\uff5a\001" +
    "\002\000\006\013\uff47\020\uff47\001\002\000\006\013\uff41" +
    "\020\uff41\001\002\000\006\013\uff30\020\uff30\001\002\000" +
    "\006\013\uff67\020\uff67\001\002\000\006\013\uff4a\020\uff4a" +
    "\001\002\000\006\013\uff33\020\uff33\001\002\000\006\013" +
    "\uff54\020\uff54\001\002\000\006\013\173\020\uffb0\001\002" +
    "\000\006\013\uff5f\020\uff5f\001\002\000\006\013\uff37\020" +
    "\uff37\001\002\000\006\013\uff35\020\uff35\001\002\000\006" +
    "\013\uff26\020\uff26\001\002\000\006\013\uff2b\020\uff2b\001" +
    "\002\000\006\013\uff4f\020\uff4f\001\002\000\006\013\uff34" +
    "\020\uff34\001\002\000\012\003\056\041\057\042\055\043" +
    "\061\001\002\000\004\020\uffb4\001\002\000\004\020\uffaf" +
    "\001\002\000\004\020\uffb3\001\002\000\004\045\200\001" +
    "\002\000\006\013\uff83\020\uff83\001\002\000\012\003\056" +
    "\041\057\042\055\043\061\001\002\000\012\003\056\041" +
    "\057\042\055\043\061\001\002\000\004\020\uffb1\001\002" +
    "\000\004\020\uffb2\001\002\000\216\005\067\006\104\007" +
    "\107\010\125\011\140\012\112\013\123\014\164\015\072" +
    "\016\114\017\150\020\135\021\153\022\073\023\063\024" +
    "\105\025\110\026\136\027\162\030\134\031\120\032\070" +
    "\033\146\034\171\035\100\036\151\037\143\040\066\041" +
    "\160\042\142\043\102\044\154\045\127\046\064\047\074" +
    "\050\116\051\075\052\155\053\071\054\131\055\077\056" +
    "\076\060\106\061\132\062\117\063\130\064\101\065\165" +
    "\066\111\067\166\070\172\071\161\072\122\073\103\074" +
    "\156\075\115\076\137\077\144\100\121\101\170\102\145" +
    "\103\147\104\126\105\141\106\167\107\113\110\133\111" +
    "\065\113\152\116\124\001\002\000\006\013\173\020\uffb0" +
    "\001\002\000\004\020\uffb5\001\002\000\010\005\uffde\013" +
    "\uffde\023\uffde\001\002\000\004\017\053\001\002\000\006" +
    "\005\uffdf\023\uffdf\001\002\000\004\020\214\001\002\000" +
    "\004\005\uffe2\001\002\000\004\017\053\001\002\000\004" +
    "\005\uffe1\001\002\000\010\002\ufff2\003\ufff2\005\ufff2\001" +
    "\002\000\006\003\221\017\223\001\002\000\004\013\333" +
    "\001\002\000\004\005\011\001\002\000\004\033\224\001" +
    "\002\000\004\012\225\001\002\000\004\022\226\001\002" +
    "\000\004\017\231\001\002\000\004\023\330\001\002\000" +
    "\010\005\uffc6\013\326\023\uffc6\001\002\000\034\003\247" +
    "\052\246\061\232\062\237\063\244\065\243\066\242\067" +
    "\250\071\240\073\234\075\233\076\241\077\245\001\002" +
    "\000\004\012\323\001\002\000\004\012\320\001\002\000" +
    "\004\012\315\001\002\000\006\013\253\020\uff82\001\002" +
    "\000\004\020\313\001\002\000\004\012\310\001\002\000" +
    "\004\012\305\001\002\000\004\012\302\001\002\000\004" +
    "\012\275\001\002\000\004\012\272\001\002\000\004\012" +
    "\267\001\002\000\004\012\264\001\002\000\004\012\262" +
    "\001\002\000\006\012\257\013\256\001\002\000\004\012" +
    "\251\001\002\000\004\070\252\001\002\000\006\013\253" +
    "\020\uff82\001\002\000\034\003\247\052\246\061\232\062" +
    "\237\063\244\065\243\066\242\067\250\071\240\073\234" +
    "\075\233\076\241\077\245\001\002\000\004\020\uff8d\001" +
    "\002\000\004\020\uff81\001\002\000\034\003\247\052\246" +
    "\061\232\062\237\063\244\065\243\066\242\067\250\071" +
    "\240\073\234\075\233\076\241\077\245\001\002\000\034" +
    "\003\247\052\246\061\232\062\237\063\244\065\243\066" +
    "\242\067\250\071\240\073\234\075\233\076\241\077\245" +
    "\001\002\000\004\020\uff85\001\002\000\004\020\uff86\001" +
    "\002\000\004\044\263\001\002\000\006\013\uff84\020\uff84" +
    "\001\002\000\216\005\067\006\104\007\107\010\125\011" +
    "\140\012\112\013\123\014\164\015\072\016\114\017\150" +
    "\020\135\021\153\022\073\023\063\024\105\025\110\026" +
    "\136\027\162\030\134\031\120\032\070\033\146\034\171" +
    "\035\100\036\151\037\143\040\066\041\160\042\142\043" +
    "\102\044\154\045\127\046\064\047\074\050\116\051\075" +
    "\052\155\053\071\054\131\055\077\056\076\060\106\061" +
    "\132\062\117\063\130\064\101\065\165\066\111\067\166" +
    "\070\172\071\161\072\122\073\103\074\156\075\115\076" +
    "\137\077\144\100\121\101\170\102\145\103\147\104\126" +
    "\105\141\106\167\107\113\110\133\111\065\113\152\116" +
    "\124\001\002\000\006\013\253\020\uff82\001\002\000\004" +
    "\020\uff88\001\002\000\004\064\270\001\002\000\006\013" +
    "\253\020\uff82\001\002\000\004\020\uff8f\001\002\000\004" +
    "\116\273\001\002\000\006\013\253\020\uff82\001\002\000" +
    "\004\020\uff87\001\002\000\220\005\067\006\104\007\107" +
    "\010\125\011\140\012\112\013\123\014\164\015\072\016" +
    "\114\017\150\020\135\021\153\022\073\023\063\024\105" +
    "\025\110\026\136\027\162\030\134\031\120\032\070\033" +
    "\146\034\171\035\100\036\151\037\143\040\066\041\160" +
    "\042\142\043\102\044\154\045\127\046\064\047\074\050" +
    "\116\051\075\052\155\053\071\054\131\055\077\056\076" +
    "\060\106\061\132\062\117\063\130\064\101\065\165\066" +
    "\111\067\166\070\172\071\161\072\122\073\103\074\156" +
    "\075\115\076\137\077\144\100\121\101\170\102\145\103" +
    "\147\104\126\105\141\106\167\107\113\110\133\111\065" +
    "\112\276\113\152\116\124\001\002\000\006\013\uff69\020" +
    "\uff69\001\002\000\006\013\253\020\uff82\001\002\000\006" +
    "\013\uff6a\020\uff6a\001\002\000\004\020\uff8e\001\002\000" +
    "\004\116\303\001\002\000\006\013\253\020\uff82\001\002" +
    "\000\004\020\uff89\001\002\000\004\072\306\001\002\000" +
    "\006\013\253\020\uff82\001\002\000\004\020\uff8c\001\002" +
    "\000\004\044\311\001\002\000\006\013\253\020\uff82\001" +
    "\002\000\004\020\uff90\001\002\000\010\005\uffc4\013\uffc4" +
    "\023\uffc4\001\002\000\004\020\uff92\001\002\000\004\113" +
    "\316\001\002\000\006\013\253\020\uff82\001\002\000\004" +
    "\020\uff8b\001\002\000\004\116\321\001\002\000\006\013" +
    "\253\020\uff82\001\002\000\004\020\uff8a\001\002\000\220" +
    "\005\067\006\104\007\107\010\125\011\140\012\112\013" +
    "\123\014\164\015\072\016\114\017\150\020\135\021\153" +
    "\022\073\023\063\024\105\025\110\026\136\027\162\030" +
    "\134\031\120\032\070\033\146\034\171\035\100\036\151" +
    "\037\143\040\066\041\160\042\142\043\102\044\154\045" +
    "\127\046\064\047\074\050\116\051\075\052\155\053\071" +
    "\054\131\055\077\056\076\060\106\061\132\062\117\063" +
    "\130\064\101\065\165\066\111\067\166\070\172\071\161" +
    "\072\122\073\103\074\156\075\115\076\137\077\144\100" +
    "\121\101\170\102\145\103\147\104\126\105\141\106\167" +
    "\107\113\110\133\111\065\112\276\113\152\116\124\001" +
    "\002\000\006\013\253\020\uff82\001\002\000\004\020\uff91" +
    "\001\002\000\004\017\231\001\002\000\006\005\uffc5\023" +
    "\uffc5\001\002\000\004\020\331\001\002\000\004\005\uffc8" +
    "\001\002\000\010\002\uffcb\003\uffcb\005\uffcb\001\002\000" +
    "\004\017\231\001\002\000\004\005\uffc7\001\002\000\006" +
    "\003\337\017\340\001\002\000\004\005\011\001\002\000" +
    "\004\013\355\001\002\000\004\021\341\001\002\000\004" +
    "\012\342\001\002\000\004\022\343\001\002\000\004\017" +
    "\344\001\002\000\012\003\056\041\057\042\055\043\061" +
    "\001\002\000\004\023\351\001\002\000\010\005\uffef\013" +
    "\347\023\uffef\001\002\000\004\017\344\001\002\000\006" +
    "\005\uffee\023\uffee\001\002\000\004\020\352\001\002\000" +
    "\004\005\ufff1\001\002\000\004\020\354\001\002\000\010" +
    "\005\uffed\013\uffed\023\uffed\001\002\000\004\017\344\001" +
    "\002\000\004\005\ufff0\001\002\000\010\002\ufff5\003\ufff5" +
    "\005\ufff5\001\002\000\006\003\361\017\362\001\002\000" +
    "\004\013\u0101\001\002\000\004\033\365\001\002\000\004" +
    "\005\011\001\002\000\010\002\uffc9\003\uffc9\005\uffc9\001" +
    "\002\000\004\012\366\001\002\000\004\022\367\001\002" +
    "\000\004\017\372\001\002\000\004\023\377\001\002\000" +
    "\010\005\uffbc\013\375\023\uffbc\001\002\000\034\003\247" +
    "\052\246\061\232\062\237\063\244\065\243\066\242\067" +
    "\250\071\240\073\234\075\233\076\241\077\245\001\002" +
    "\000\004\020\374\001\002\000\010\005\uffba\013\uffba\023" +
    "\uffba\001\002\000\004\017\372\001\002\000\006\005\uffbb" +
    "\023\uffbb\001\002\000\004\020\u0100\001\002\000\004\005" +
    "\uffbe\001\002\000\004\017\372\001\002\000\004\005\uffbd" +
    "\001\002\000\006\003\u0104\017\u0106\001\002\000\004\013" +
    "\u012b\001\002\000\004\005\011\001\002\000\004\027\u0107" +
    "\001\002\000\004\012\u0108\001\002\000\004\022\u0109\001" +
    "\002\000\004\017\u010c\001\002\000\004\023\u0128\001\002" +
    "\000\010\005\uffce\013\u0126\023\uffce\001\002\000\014\003" +
    "\u0110\052\u010d\053\u010f\054\u0112\055\u010e\001\002\000\004" +
    "\012\u0123\001\002\000\004\012\u0120\001\002\000\004\012" +
    "\u011d\001\002\000\006\012\u011a\013\u0119\001\002\000\004" +
    "\020\u0118\001\002\000\004\012\u0113\001\002\000\216\005" +
    "\067\006\104\007\107\010\125\011\140\012\112\013\123" +
    "\014\164\015\072\016\114\017\150\020\135\021\153\022" +
    "\073\023\063\024\105\025\110\026\136\027\162\030\134" +
    "\031\120\032\070\033\146\034\171\035\100\036\151\037" +
    "\143\040\066\041\160\042\142\043\102\044\154\045\127" +
    "\046\064\047\074\050\116\051\075\052\155\053\071\054" +
    "\131\055\077\056\076\060\106\061\132\062\117\063\130" +
    "\064\101\065\165\066\111\067\166\070\172\071\161\072" +
    "\122\073\103\074\156\075\115\076\137\077\144\100\121" +
    "\101\170\102\145\103\147\104\126\105\141\106\167\107" +
    "\113\110\133\111\065\113\152\116\124\001\002\000\006" +
    "\013\u0115\020\uff94\001\002\000\014\003\u0110\052\u010d\053" +
    "\u010f\054\u0112\055\u010e\001\002\000\004\020\uff98\001\002" +
    "\000\004\020\uff93\001\002\000\010\005\uffcc\013\uffcc\023" +
    "\uffcc\001\002\000\014\003\u0110\052\u010d\053\u010f\054\u0112" +
    "\055\u010e\001\002\000\014\003\u0110\052\u010d\053\u010f\054" +
    "\u0112\055\u010e\001\002\000\004\020\uff95\001\002\000\004" +
    "\020\uff96\001\002\000\220\005\067\006\104\007\107\010" +
    "\125\011\140\012\112\013\123\014\164\015\072\016\114" +
    "\017\150\020\135\021\153\022\073\023\063\024\105\025" +
    "\110\026\136\027\162\030\134\031\120\032\070\033\146" +
    "\034\171\035\100\036\151\037\143\040\066\041\160\042" +
    "\142\043\102\044\154\045\127\046\064\047\074\050\116" +
    "\051\075\052\155\053\071\054\131\055\077\056\076\060" +
    "\106\061\132\062\117\063\130\064\101\065\165\066\111" +
    "\067\166\070\172\071\161\072\122\073\103\074\156\075" +
    "\115\076\137\077\144\100\121\101\170\102\145\103\147" +
    "\104\126\105\141\106\167\107\113\110\133\111\065\112" +
    "\276\113\152\116\124\001\002\000\006\013\u0115\020\uff94" +
    "\001\002\000\004\020\uff99\001\002\000\004\060\u0121\001" +
    "\002\000\006\013\u0115\020\uff94\001\002\000\004\020\uff97" +
    "\001\002\000\004\044\u0124\001\002\000\006\013\u0115\020" +
    "\uff94\001\002\000\004\020\uff9a\001\002\000\004\017\u010c" +
    "\001\002\000\006\005\uffcd\023\uffcd\001\002\000\004\020" +
    "\u0129\001\002\000\004\005\uffd0\001\002\000\010\002\uffdb" +
    "\003\uffdb\005\uffdb\001\002\000\004\017\u010c\001\002\000" +
    "\004\005\uffcf\001\002\000\004\017\u012f\001\002\000\004" +
    "\110\u0135\001\002\000\004\037\u0130\001\002\000\004\012" +
    "\u0131\001\002\000\004\022\u0132\001\002\000\004\017\u0133" +
    "\001\002\000\004\110\uffb8\001\002\000\004\020\u015d\001" +
    "\002\000\004\012\u0136\001\002\000\004\100\u0138\001\002" +
    "\000\006\013\u015a\020\uff6c\001\002\000\004\101\u0139\001" +
    "\002\000\004\102\u013a\001\002\000\004\106\u013b\001\002" +
    "\000\004\044\u013c\001\002\000\004\022\u013d\001\002\000" +
    "\010\013\uff7e\023\uff7e\114\u013e\001\002\000\006\013\uff7d" +
    "\023\uff7d\001\002\000\004\023\u0144\001\002\000\006\013" +
    "\u0141\023\uff7b\001\002\000\010\013\uff7e\023\uff7e\114\u013e" +
    "\001\002\000\004\023\uff7c\001\002\000\004\023\uff7a\001" +
    "\002\000\006\004\u0147\103\u0146\001\002\000\006\013\uff7f" +
    "\020\uff7f\001\002\000\004\022\u0148\001\002\000\006\013" +
    "\uff79\020\uff79\001\002\000\004\114\u0149\001\002\000\010" +
    "\005\u014e\006\u014d\104\u014f\001\002\000\004\023\u014b\001" +
    "\002\000\004\004\u014c\001\002\000\006\013\uff78\020\uff78" +
    "\001\002\000\010\104\u0159\115\uff72\116\uff72\001\002\000" +
    "\012\006\u0157\104\u0158\115\uff71\116\uff71\001\002\000\006" +
    "\115\uff6f\116\uff6f\001\002\000\006\115\u0152\116\u0153\001" +
    "\002\000\006\023\uff74\105\u0155\001\002\000\006\023\uff75" +
    "\105\uff75\001\002\000\006\023\uff76\105\uff76\001\002\000" +
    "\004\023\uff77\001\002\000\004\114\u0149\001\002\000\004" +
    "\023\uff73\001\002\000\006\115\uff70\116\uff70\001\002\000" +
    "\006\115\uff6d\116\uff6d\001\002\000\006\115\uff6e\116\uff6e" +
    "\001\002\000\004\110\u0135\001\002\000\004\020\uff80\001" +
    "\002\000\004\020\uff6b\001\002\000\004\023\u0160\001\002" +
    "\000\004\005\011\001\002\000\010\002\uffb9\003\uffb9\005" +
    "\uffb9\001\002\000\004\020\u0161\001\002\000\004\005\uffb7" +
    "\001\002\000\006\003\u0163\017\u0164\001\002\000\004\013" +
    "\u0176\001\002\000\004\027\u0167\001\002\000\004\005\011" +
    "\001\002\000\010\002\uffdc\003\uffdc\005\uffdc\001\002\000" +
    "\004\012\u0168\001\002\000\004\022\u0169\001\002\000\004" +
    "\017\u016b\001\002\000\004\023\u0174\001\002\000\004\052" +
    "\u016f\001\002\000\010\005\uffd3\013\u016d\023\uffd3\001\002" +
    "\000\004\017\u016b\001\002\000\006\005\uffd2\023\uffd2\001" +
    "\002\000\004\012\u0172\001\002\000\004\020\u0171\001\002" +
    "\000\010\005\uffd1\013\uffd1\023\uffd1\001\002\000\004\044" +
    "\u0173\001\002\000\004\020\uff9b\001\002\000\004\020\u0175" +
    "\001\002\000\004\005\uffd5\001\002\000\004\017\u016b\001" +
    "\002\000\004\005\uffd4\001\002\000\006\003\u017a\017\u017b" +
    "\001\002\000\004\005\011\001\002\000\004\013\u01a3\001" +
    "\002\000\004\027\u017c\001\002\000\004\012\u017d\001\002" +
    "\000\004\022\u017e\001\002\000\004\017\u017f\001\002\000" +
    "\020\003\u018c\041\057\052\246\053\u0187\054\u018d\055\u018a" +
    "\056\u0186\001\002\000\004\023\u0184\001\002\000\010\005" +
    "\uffd8\013\u0182\023\uffd8\001\002\000\004\017\u017f\001\002" +
    "\000\006\005\uffd7\023\uffd7\001\002\000\004\020\u0185\001" +
    "\002\000\004\005\uffda\001\002\000\004\012\u01a0\001\002" +
    "\000\004\012\u019d\001\002\000\006\013\u0190\020\uff9d\001" +
    "\002\000\006\013\u0190\020\uff9d\001\002\000\004\012\u0198" +
    "\001\002\000\004\020\u0197\001\002\000\006\012\u0194\013" +
    "\u0193\001\002\000\004\012\u018e\001\002\000\216\005\067" +
    "\006\104\007\107\010\125\011\140\012\112\013\123\014" +
    "\164\015\072\016\114\017\150\020\135\021\153\022\073" +
    "\023\063\024\105\025\110\026\136\027\162\030\134\031" +
    "\120\032\070\033\146\034\171\035\100\036\151\037\143" +
    "\040\066\041\160\042\142\043\102\044\154\045\127\046" +
    "\064\047\074\050\116\051\075\052\155\053\071\054\131" +
    "\055\077\056\076\060\106\061\132\062\117\063\130\064" +
    "\101\065\165\066\111\067\166\070\172\071\161\072\122" +
    "\073\103\074\156\075\115\076\137\077\144\100\121\101" +
    "\170\102\145\103\147\104\126\105\141\106\167\107\113" +
    "\110\133\111\065\113\152\116\124\001\002\000\006\013" +
    "\u0190\020\uff9d\001\002\000\020\003\u018c\041\057\052\246" +
    "\053\u0187\054\u018d\055\u018a\056\u0186\001\002\000\004\020" +
    "\uffa3\001\002\000\004\020\uff9c\001\002\000\020\003\u018c" +
    "\041\057\052\246\053\u0187\054\u018d\055\u018a\056\u0186\001" +
    "\002\000\020\003\u018c\041\057\052\246\053\u0187\054\u018d" +
    "\055\u018a\056\u0186\001\002\000\004\020\uff9e\001\002\000" +
    "\004\020\uff9f\001\002\000\010\005\uffd6\013\uffd6\023\uffd6" +
    "\001\002\000\004\060\u0199\001\002\000\006\013\u0190\020" +
    "\uff9d\001\002\000\004\020\uffa2\001\002\000\004\020\uffa5" +
    "\001\002\000\004\020\uffa0\001\002\000\220\005\067\006" +
    "\104\007\107\010\125\011\140\012\112\013\123\014\164" +
    "\015\072\016\114\017\150\020\135\021\153\022\073\023" +
    "\063\024\105\025\110\026\136\027\162\030\134\031\120" +
    "\032\070\033\146\034\171\035\100\036\151\037\143\040" +
    "\066\041\160\042\142\043\102\044\154\045\127\046\064" +
    "\047\074\050\116\051\075\052\155\053\071\054\131\055" +
    "\077\056\076\060\106\061\132\062\117\063\130\064\101" +
    "\065\165\066\111\067\166\070\172\071\161\072\122\073" +
    "\103\074\156\075\115\076\137\077\144\100\121\101\170" +
    "\102\145\103\147\104\126\105\141\106\167\107\113\110" +
    "\133\111\065\112\276\113\152\116\124\001\002\000\006" +
    "\013\u0190\020\uff9d\001\002\000\004\020\uffa4\001\002\000" +
    "\216\005\067\006\104\007\107\010\125\011\140\012\112" +
    "\013\123\014\164\015\072\016\114\017\150\020\135\021" +
    "\153\022\073\023\063\024\105\025\110\026\136\027\162" +
    "\030\134\031\120\032\070\033\146\034\171\035\100\036" +
    "\151\037\143\040\066\041\160\042\142\043\102\044\154" +
    "\045\127\046\064\047\074\050\116\051\075\052\155\053" +
    "\071\054\131\055\077\056\076\060\106\061\132\062\117" +
    "\063\130\064\101\065\165\066\111\067\166\070\172\071" +
    "\161\072\122\073\103\074\156\075\115\076\137\077\144" +
    "\100\121\101\170\102\145\103\147\104\126\105\141\106" +
    "\167\107\113\110\133\111\065\113\152\116\124\001\002" +
    "\000\006\013\u0190\020\uff9d\001\002\000\004\020\uffa1\001" +
    "\002\000\004\017\u017f\001\002\000\004\005\uffd9\001\002" +
    "\000\010\002\uffdd\003\uffdd\005\uffdd\001\002\000\006\003" +
    "\u01a8\017\u01a9\001\002\000\004\005\011\001\002\000\004" +
    "\013\u01b6\001\002\000\004\033\u01aa\001\002\000\004\012" +
    "\u01ab\001\002\000\004\022\u01ac\001\002\000\004\017\u01ad" +
    "\001\002\000\034\003\247\052\246\061\232\062\237\063" +
    "\244\065\243\066\242\067\250\071\240\073\234\075\233" +
    "\076\241\077\245\001\002\000\004\023\u01b2\001\002\000" +
    "\010\005\uffc1\013\u01b0\023\uffc1\001\002\000\004\017\u01ad" +
    "\001\002\000\006\005\uffc0\023\uffc0\001\002\000\004\020" +
    "\u01b3\001\002\000\004\005\uffc3\001\002\000\004\020\u01b5" +
    "\001\002\000\010\005\uffbf\013\uffbf\023\uffbf\001\002\000" +
    "\004\017\u01ad\001\002\000\004\005\uffc2\001\002\000\010" +
    "\002\uffca\003\uffca\005\uffca\001\002\000\006\003\u01ba\017" +
    "\u01bb\001\002\000\004\013\u01e1\001\002\000\004\021\u01be" +
    "\001\002\000\004\005\011\001\002\000\010\002\ufff4\003" +
    "\ufff4\005\ufff4\001\002\000\004\012\u01bf\001\002\000\004" +
    "\022\u01c0\001\002\000\004\017\u01c2\001\002\000\004\023" +
    "\u01df\001\002\000\014\003\u01c8\046\u01c6\047\u01ca\050\u01c9" +
    "\051\u01c7\001\002\000\010\005\uffea\013\u01c4\023\uffea\001" +
    "\002\000\004\017\u01c2\001\002\000\006\005\uffe9\023\uffe9" +
    "\001\002\000\004\012\u01dc\001\002\000\004\012\u01d9\001" +
    "\002\000\006\012\u01d6\013\u01d5\001\002\000\004\012\u01d2" +
    "\001\002\000\004\012\u01cd\001\002\000\004\020\u01cc\001" +
    "\002\000\010\005\uffe8\013\uffe8\023\uffe8\001\002\000\216" +
    "\005\067\006\104\007\107\010\125\011\140\012\112\013" +
    "\123\014\164\015\072\016\114\017\150\020\135\021\153" +
    "\022\073\023\063\024\105\025\110\026\136\027\162\030" +
    "\134\031\120\032\070\033\146\034\171\035\100\036\151" +
    "\037\143\040\066\041\160\042\142\043\102\044\154\045" +
    "\127\046\064\047\074\050\116\051\075\052\155\053\071" +
    "\054\131\055\077\056\076\060\106\061\132\062\117\063" +
    "\130\064\101\065\165\066\111\067\166\070\172\071\161" +
    "\072\122\073\103\074\156\075\115\076\137\077\144\100" +
    "\121\101\170\102\145\103\147\104\126\105\141\106\167" +
    "\107\113\110\133\111\065\113\152\116\124\001\002\000" +
    "\006\013\u01cf\020\uffa8\001\002\000\014\003\u01c8\046\u01c6" +
    "\047\u01ca\050\u01c9\051\u01c7\001\002\000\004\020\uffad\001" +
    "\002\000\004\020\uffa7\001\002\000\216\005\067\006\104" +
    "\007\107\010\125\011\140\012\112\013\123\014\164\015" +
    "\072\016\114\017\150\020\135\021\153\022\073\023\063" +
    "\024\105\025\110\026\136\027\162\030\134\031\120\032" +
    "\070\033\146\034\171\035\100\036\151\037\143\040\066" +
    "\041\160\042\142\043\102\044\154\045\127\046\064\047" +
    "\074\050\116\051\075\052\155\053\071\054\131\055\077" +
    "\056\076\060\106\061\132\062\117\063\130\064\101\065" +
    "\165\066\111\067\166\070\172\071\161\072\122\073\103" +
    "\074\156\075\115\076\137\077\144\100\121\101\170\102" +
    "\145\103\147\104\126\105\141\106\167\107\113\110\133" +
    "\111\065\113\152\116\124\001\002\000\006\013\u01cf\020" +
    "\uffa8\001\002\000\004\020\uffac\001\002\000\014\003\u01c8" +
    "\046\u01c6\047\u01ca\050\u01c9\051\u01c7\001\002\000\014\003" +
    "\u01c8\046\u01c6\047\u01ca\050\u01c9\051\u01c7\001\002\000\004" +
    "\020\uffa9\001\002\000\004\020\uffaa\001\002\000\004\045" +
    "\u01da\001\002\000\006\013\u01cf\020\uffa8\001\002\000\004" +
    "\020\uffab\001\002\000\216\005\067\006\104\007\107\010" +
    "\125\011\140\012\112\013\123\014\164\015\072\016\114" +
    "\017\150\020\135\021\153\022\073\023\063\024\105\025" +
    "\110\026\136\027\162\030\134\031\120\032\070\033\146" +
    "\034\171\035\100\036\151\037\143\040\066\041\160\042" +
    "\142\043\102\044\154\045\127\046\064\047\074\050\116" +
    "\051\075\052\155\053\071\054\131\055\077\056\076\060" +
    "\106\061\132\062\117\063\130\064\101\065\165\066\111" +
    "\067\166\070\172\071\161\072\122\073\103\074\156\075" +
    "\115\076\137\077\144\100\121\101\170\102\145\103\147" +
    "\104\126\105\141\106\167\107\113\110\133\111\065\113" +
    "\152\116\124\001\002\000\006\013\u01cf\020\uffa8\001\002" +
    "\000\004\020\uffae\001\002\000\004\020\u01e0\001\002\000" +
    "\004\005\uffec\001\002\000\004\017\u01c2\001\002\000\004" +
    "\005\uffeb\001\002\000\006\003\u01e4\017\u01e6\001\002\000" +
    "\004\013\u01f7\001\002\000\004\005\011\001\002\000\004" +
    "\021\u01e7\001\002\000\004\012\u01e8\001\002\000\004\022" +
    "\u01e9\001\002\000\004\017\u01ec\001\002\000\004\023\u01f4" +
    "\001\002\000\010\005\uffe5\013\u01f2\023\uffe5\001\002\000" +
    "\004\042\u01ed\001\002\000\004\012\u01f0\001\002\000\004" +
    "\020\u01ef\001\002\000\010\005\uffe3\013\uffe3\023\uffe3\001" +
    "\002\000\216\005\067\006\104\007\107\010\125\011\140" +
    "\012\112\013\123\014\164\015\072\016\114\017\150\020" +
    "\135\021\153\022\073\023\063\024\105\025\110\026\136" +
    "\027\162\030\134\031\120\032\070\033\146\034\171\035" +
    "\100\036\151\037\143\040\066\041\160\042\142\043\102" +
    "\044\154\045\127\046\064\047\074\050\116\051\075\052" +
    "\155\053\071\054\131\055\077\056\076\060\106\061\132" +
    "\062\117\063\130\064\101\065\165\066\111\067\166\070" +
    "\172\071\161\072\122\073\103\074\156\075\115\076\137" +
    "\077\144\100\121\101\170\102\145\103\147\104\126\105" +
    "\141\106\167\107\113\110\133\111\065\113\152\116\124" +
    "\001\002\000\004\020\uffa6\001\002\000\004\017\u01ec\001" +
    "\002\000\006\005\uffe4\023\uffe4\001\002\000\004\020\u01f5" +
    "\001\002\000\004\005\uffe7\001\002\000\010\002\ufff3\003" +
    "\ufff3\005\ufff3\001\002\000\004\017\u01ec\001\002\000\004" +
    "\005\uffe6\001\002\000\004\007\u01fa\001\002\000\004\006" +
    "\u01fb\001\002\000\010\002\uffb6\003\uffb6\005\uffb6\001\002" +
    "\000\006\010\020\014\u01fd\001\002\000\004\006\u01fe\001" +
    "\002\000\006\003\015\005\014\001\002\000\006\003\ufffd" +
    "\005\ufffd\001\002\000\006\003\015\005\u0201\001\002\000" +
    "\004\007\u0203\001\002\000\006\003\ufffc\005\ufffc\001\002" +
    "\000\006\010\020\015\u0204\001\002\000\004\006\u0205\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0203\000\006\002\006\004\005\001\001\000\002\001" +
    "\001\000\004\006\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\015\001\001\000\002\001\001\000\004" +
    "\006\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\035\100\032\101\037\102\036" +
    "\103\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\042\001\001\000\004\006\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\054\051\055\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\053\024" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\175\001\001\000" +
    "\002\001\001\000\006\105\156\106\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\174\024\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\203\024\057\001\001\000" +
    "\006\010\202\024\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\105\156\106\205\001\001\000\004\011" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\054\051\055\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\054\051\055\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\221\001" +
    "\001\000\002\001\001\000\004\006\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\070" +
    "\227\071\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\235\104\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\253" +
    "\001\001\000\006\022\254\104\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\260\104\234\001\001" +
    "\000\006\022\257\104\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\105\156\106\264\001\001\000\004\023\265\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\273\001" +
    "\001\000\002\001\001\000\010\040\276\105\156\106\277" +
    "\001\001\000\002\001\001\000\004\023\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\321\001\001\000\002\001\001\000\010\040\323\105\156" +
    "\106\277\001\001\000\004\023\324\001\001\000\002\001" +
    "\001\000\006\070\227\071\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\070\227\071\333\001\001\000\002\001\001\000\004" +
    "\042\335\001\001\000\004\006\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\043\345\044\344\001\001\000\006\010\352\024" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\345\044\347\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\043\345\044\355\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\362\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\076\370" +
    "\077\367\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\372\104\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\076\370\077\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\076\370" +
    "\077\u0101\001\001\000\002\001\001\000\004\064\u0104\001" +
    "\001\000\002\001\001\000\004\006\u0129\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\065" +
    "\u010a\066\u0109\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\105\156\106\u0113\001\001\000" +
    "\004\021\u0115\001\001\000\004\020\u0116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u011b\001\001\000\004\020\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\040\u011d\105\156\106\277\001" +
    "\001\000\004\021\u011e\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u0121\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u0124\001\001\000\002\001\001" +
    "\000\006\065\u010a\066\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\065\u010a\066\u012b\001\001\000\002\001\001\000\004\005" +
    "\u012d\001\001\000\004\025\u0133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\u015d\001\001\000\002\001\001" +
    "\000\004\026\u0136\001\001\000\004\037\u015a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\u013f\030\u013e\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u0141" +
    "\001\001\000\006\027\u013f\030\u0142\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u0144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\u0149\001\001\000\004\036\u014f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\u0150\001\001" +
    "\000\004\035\u0153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u0155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\u015b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u015e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\u0164\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u0165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\062\u016b\063\u0169\001\001\000" +
    "\002\001\001\000\004\017\u016f\001\001\000\002\001\001" +
    "\000\006\062\u016b\063\u016d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\062\u016b\063\u0176\001\001\000\002\001\001" +
    "\000\004\056\u0178\001\001\000\004\006\u01a4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\057\u0180\060\u017f\001\001\000\010\015" +
    "\u018a\024\u0187\104\u0188\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\057\u0180\060\u0182\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\u019b\001\001\000\004\016" +
    "\u019a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\105\156\106\u018e\001" +
    "\001\000\004\016\u0190\001\001\000\010\015\u0191\024\u0187" +
    "\104\u0188\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\u0195\024\u0187\104\u0188\001\001\000\010\015\u0194" +
    "\024\u0187\104\u0188\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\u0199" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\040\u019d\105\156\106\277\001\001\000\004" +
    "\016\u019e\001\001\000\002\001\001\000\006\105\156\106" +
    "\u01a0\001\001\000\004\016\u01a1\001\001\000\002\001\001" +
    "\000\006\057\u0180\060\u01a3\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\u01a6\001\001\000\004\006\u01b7" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\073\u01ae\074\u01ad\001\001" +
    "\000\006\022\u01b3\104\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\073\u01ae\074\u01b0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\073\u01ae\074\u01b6\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\u01bb\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u01bc" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\046\u01c2\047\u01c0\001\001\000\002\001\001" +
    "\000\004\012\u01ca\001\001\000\002\001\001\000\006\046" +
    "\u01c2\047\u01c4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\105\156\106\u01cd\001\001\000\004\013\u01cf\001\001\000" +
    "\004\012\u01d0\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\105\156\106\u01d2\001\001\000\004\013\u01d3\001" +
    "\001\000\002\001\001\000\004\012\u01d7\001\001\000\004" +
    "\012\u01d6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u01da\001\001\000\002\001\001" +
    "\000\006\105\156\106\u01dc\001\001\000\004\013\u01dd\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\046\u01c2\047\u01e1\001\001\000\002\001\001\000" +
    "\004\050\u01e4\001\001\000\002\001\001\000\004\006\u01f5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\u01ea\052\u01e9\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u01ed\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\105\156" +
    "\106\u01f0\001\001\000\002\001\001\000\006\051\u01ea\052" +
    "\u01f2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\u01ea\052\u01f7\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\u01ff\004\u01fe\001\001\000\002\001\001\000\004" +
    "\004\u0201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



private Reportes reporte;
public parser(lexico entrada,Reportes reporteEntrada){
	super(entrada);	
	reporte = reporteEntrada;
}
public void report_error(String message, Object info) {
	StringBuffer m = new StringBuffer("Error");
	if(info instanceof java_cup.runtime.Symbol){
		java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
		int posxy [] =new int[2];
		int linea = 0,columna = 0;
		if(s.left >=0){
			//m.append("en linea ");
			linea = (s.left+1);
			if(s.right >=0){
				//m.append("columna "+(s.right+1));
				columna = (s.right+1);
			}
		}
		m.append(": "+message);
		reporte.agregarError("sintactico",m.toString(),linea,columna);
	}
	System.out.println(m);
	limpiarAuxiliares();
}

public void syntax_error(Symbol cur_token){
    List<Integer> ids = this.expected_token_ids();
    String salida = "Error sintactico token :"+symbl_name_from_id(cur_token.sym);
    if(cur_token.value!=null)salida+=" Valor: "+cur_token.value.toString();
    if(ids.size()>0){
        salida+="\n Se esperaba: ";
        for (Integer e:ids){
        salida+= symbl_name_from_id(e)+"\n";
        }
    }
    reporte.agregarError("sintactico",salida,(cur_token.left+1),(cur_token.right+1));
    limpiarAuxiliares();    
    System.out.println(salida);
}
public void report_fatal_error(String message, Object info){
	System.out.println("Error irrecuperable");
	limpiarAuxiliares();
}
private List <String> parametrosSolicitud = new ArrayList<>();
private List<String> datosSolicitud = new ArrayList<>();
private List<Solicitudes> solicitudes = new ArrayList<>();


public List<Solicitudes> getSolicitudes(){
	return this.solicitudes;
}
private void limpiarAuxiliares(){
	parametrosSolicitud.clear();
	datosSolicitud.clear();
	repetidos = false;
}
private boolean repetidos = false;
private void agregarDatos(String tipo,String dato){
	if(!parametrosSolicitud.contains(tipo)){
		parametrosSolicitud.add(tipo);
		datosSolicitud.add(dato);
	}else repetidos = true;
	
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S0 ::= MENOR_QUE SIGNO_INTERROGACION INICIO_SOLICITUDES MAYOR_QUE S1 MENOR_QUE SIGNO_INTERROGACION FIN_SOLICITUDES MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S0 ::= S2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S0 ::= error COMILLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S1 ::= S2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S1 ::= S1 S2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S2 ::= MENOR_QUE SIGNO_INTERROGACION INICIO_SOLICITUD DOS_PUNTOS S9 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//System.out.println("Solicitud: "+d+ " aceptada");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S2 ::= error S8 S2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S9 ::= S3 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S9",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S9 ::= S10 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S9",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S9 ::= S11 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S9",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S9 ::= S12 
            {
              String RESULT =null;
		//CONSULTAR_DATOS
		RESULT = "CONSULTAR_DATOS";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S9",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S3 ::= CREAR_USUARIO MAYOR_QUE S50 S8 
            {
              String RESULT =null;
								
			RESULT = "CREAR_USUARIO";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S3",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S3 ::= MODIFICAR_USUARIO MAYOR_QUE S53 S8 
            {
              String RESULT =null;
		
			RESULT = "MODIFICAR_USUARIO";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S3",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S3 ::= ELIMINAR_USUARIO MAYOR_QUE S56 S8 
            {
              String RESULT =null;
		
			RESULT = "ELIMINAR_USUARIO";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S3",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S3 ::= LOGIN_USUARIO MAYOR_QUE S59 S8 
            {
              String RESULT =null;
		
			RESULT = "LOGIN_USUARIO";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S3",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S50 ::= LLAVE_ABIERTA CREDENCIALES_USUARIO DOS_PUNTOS CORCHETE_ABIERTO S52 CORCHETE_CERRADO LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S50",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S50 ::= error COMA S52 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S50",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // S52 ::= S51 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S52",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S52 ::= S51 COMA S52 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S52",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // S51 ::= LLAVE_ABIERTA S13 LLAVE_CERRADA 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//CRUD_USUARIO 
			if(!repetidos && ManejadorUsuario.parametrosVerificador("CREAR_USUARIO", parametrosSolicitud))
				 {
				 	int posXY [] = {(Dleft+1),(Dright+1)};
				 	solicitudes.add
				 	(new Solicitudes ("CRUD_USUARIO","CREAR_USUARIO",datosSolicitud, parametrosSolicitud,posXY));
				 	//ManejadorUsuario.consultaUsuario
				 	//(D.toString(),datosSolicitud,parametrosSolicitud);
				 }else{
					String parametrosObligatorios = 
					ManejadorUsuario.parametrosObligatorios("CREAR_USUARIO");
					if(repetidos)parametrosObligatorios = "Parametros repetidos ";
					reporte.agregarError("Semantico",parametrosObligatorios,(Dleft+1),(Dright+1));					
					System.out.println("--No agrego solicitud : CREAR_USUARIO en s1 normal--");
				 }				 
				 limpiarAuxiliares();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S51",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // S53 ::= LLAVE_ABIERTA CREDENCIALES_USUARIO DOS_PUNTOS CORCHETE_ABIERTO S55 CORCHETE_CERRADO LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S53",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // S53 ::= error COMA S55 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S53",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // S55 ::= S54 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S55",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // S55 ::= S54 COMA S55 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S55",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // S54 ::= LLAVE_ABIERTA S15 LLAVE_CERRADA 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//CRUD_USUARIO 
		String tipo = "MODIFICAR_USUARIO";
			if(!repetidos && ManejadorUsuario.parametrosVerificador(tipo, parametrosSolicitud))
				 {
				 	int posXY [] = {(Dleft+1),(Dright+1)};
				 	solicitudes.add
				 	(new Solicitudes ("CRUD_USUARIO",tipo,datosSolicitud, parametrosSolicitud,posXY));
				 	//ManejadorUsuario.consultaUsuario
				 	//(D.toString(),datosSolicitud,parametrosSolicitud);
				 }else{
					String parametrosObligatorios = 
					ManejadorUsuario.parametrosObligatorios(tipo);
					if(repetidos)parametrosObligatorios = "Parametros repetidos ";
					reporte.agregarError("Semantico",parametrosObligatorios,(Dleft+1),(Dright+1));					
					//System.out.println("--No agrego solicitud : CREAR_USUARIO --");
				 }				 
				 limpiarAuxiliares();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S54",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // S56 ::= LLAVE_ABIERTA CREDENCIALES_USUARIO DOS_PUNTOS CORCHETE_ABIERTO S58 CORCHETE_CERRADO LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S56",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // S56 ::= error COMA S58 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S56",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // S58 ::= S57 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S58",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // S58 ::= S57 COMA S58 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S58",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // S57 ::= LLAVE_ABIERTA S17 LLAVE_CERRADA 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//CRUD_USUARIO 
		String tipo = "ELIMINAR_USUARIO";
			if(!repetidos && ManejadorUsuario.parametrosVerificador(tipo, parametrosSolicitud))
				 {
				 	int posXY [] = {(Dleft+1),(Dright+1)};
				 	solicitudes.add
				 	(new Solicitudes ("CRUD_USUARIO",tipo,datosSolicitud, parametrosSolicitud,posXY));
				 	//ManejadorUsuario.consultaUsuario
				 	//(D.toString(),datosSolicitud,parametrosSolicitud);
				 }else{
					String parametrosObligatorios = 
					ManejadorUsuario.parametrosObligatorios(tipo);
					if(repetidos)parametrosObligatorios = "Parametros repetidos ";
					reporte.agregarError("Semantico",parametrosObligatorios,(Dleft+1),(Dright+1));					
					//System.out.println("--No agrego solicitud : CREAR_USUARIO --");
				 }				 
				 limpiarAuxiliares();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S57",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // S59 ::= LLAVE_ABIERTA CREDENCIALES_USUARIO DOS_PUNTOS CORCHETE_ABIERTO S61 CORCHETE_CERRADO LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S59",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // S59 ::= error COMA S61 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S59",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // S61 ::= S60 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S61",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // S61 ::= S60 COMA S61 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S61",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // S60 ::= LLAVE_ABIERTA S13 LLAVE_CERRADA 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//CRUD_USUARIO 
		String tipo = "LOGIN_USUARIO";
			if(!repetidos && ManejadorUsuario.parametrosVerificador(tipo, parametrosSolicitud))
				 {
				 	int posXY [] = {(Dleft+1),(Dright+1)};
				 	solicitudes.add
				 	(new Solicitudes ("CRUD_USUARIO",tipo,datosSolicitud, parametrosSolicitud,posXY));
				 	//ManejadorUsuario.consultaUsuario
				 	//(D.toString(),datosSolicitud,parametrosSolicitud);
				 }else{
					String parametrosObligatorios = 
					ManejadorUsuario.parametrosObligatorios(tipo);
					if(repetidos)parametrosObligatorios = "Parametros repetidos ";
					reporte.agregarError("Semantico",parametrosObligatorios,(Dleft+1),(Dright+1));					
					//System.out.println("--No agrego solicitud : CREAR_USUARIO --");
				 }				 
				 limpiarAuxiliares();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S60",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // S10 ::= NUEVO_FORMULARIO MAYOR_QUE S62 S8 
            {
              String RESULT =null;
		
			RESULT = "NUEVO_FORMULARIO";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S10",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // S10 ::= ELIMINAR_FORMULARIO MAYOR_QUE S65 S8 
            {
              String RESULT =null;
		
			RESULT = "ELIMINAR_FORMULARIO";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S10",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // S10 ::= MODIFICAR_FORMULARIO MAYOR_QUE S68 S8 
            {
              String RESULT =null;
		
			RESULT = "MODIFICAR_FORMULARIO";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S10",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // S62 ::= LLAVE_ABIERTA PARAMETROS_FORMULARIO DOS_PUNTOS CORCHETE_ABIERTO S64 CORCHETE_CERRADO LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S62",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // S62 ::= error COMA S64 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S62",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // S64 ::= S63 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S64",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // S64 ::= S63 COMA S64 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S64",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // S63 ::= LLAVE_ABIERTA S18 LLAVE_CERRADA 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//CRUD_FORMULARIO
		String tipo =  "NUEVO_FORMULARIO";
			if(!repetidos && ManejadorFormulario.parametrosVerificador(tipo, parametrosSolicitud))
				 {
				 int posXY [] = {(Dleft+1),(Dright+1)};
				solicitudes.add
				 	(new Solicitudes ("CRUD_FORMULARIO",tipo,datosSolicitud, parametrosSolicitud,posXY));
				 		//ManejadorFormulario.consultaFormulario
				 		//(D.toString(),datosSolicitud,parametrosSolicitud,"juan");
				 }else {
				 String parametrosObligatorios = 
				 ManejadorFormulario.parametrosObligatorios(tipo);
				 if(repetidos)parametrosObligatorios = "Parametros repetidos ";
				 reporte.agregarError("Semantico",parametrosObligatorios,(Dleft+1),(Dright+1));
				 	//System.out.println("--No agrego solicitud : CRUD_FORMULARIO --");
				 }
				 RESULT = "CRUD FORMULARIO";
				 limpiarAuxiliares();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S63",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // S65 ::= LLAVE_ABIERTA PARAMETROS_FORMULARIO DOS_PUNTOS CORCHETE_ABIERTO S67 CORCHETE_CERRADO LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S65",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // S65 ::= error COMA S67 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S65",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // S67 ::= S66 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S67",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // S67 ::= S66 COMA S67 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S67",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // S66 ::= LLAVE_ABIERTA S20 LLAVE_CERRADA 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//CRUD_FORMULARIO
		String tipo =  "ELIMINAR_FORMULARIO";
			if(!repetidos && ManejadorFormulario.parametrosVerificador(tipo, parametrosSolicitud))
				 {
				 int posXY [] = {(Dleft+1),(Dright+1)};
				solicitudes.add
				 	(new Solicitudes ("CRUD_FORMULARIO",tipo,datosSolicitud, parametrosSolicitud,posXY));
				 		//ManejadorFormulario.consultaFormulario
				 		//(D.toString(),datosSolicitud,parametrosSolicitud,"juan");
				 }else {
				 String parametrosObligatorios = 
				 ManejadorFormulario.parametrosObligatorios(tipo);
				 if(repetidos)parametrosObligatorios = "Parametros repetidos ";
				 reporte.agregarError("Semantico",parametrosObligatorios,(Dleft+1),(Dright+1));
				 	//System.out.println("--No agrego solicitud : CRUD_FORMULARIO --");
				 }
				 RESULT = "CRUD FORMULARIO";
				 limpiarAuxiliares();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S66",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // S68 ::= LLAVE_ABIERTA PARAMETROS_FORMULARIO DOS_PUNTOS CORCHETE_ABIERTO S70 CORCHETE_CERRADO LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S68",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // S68 ::= error COMA S70 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S68",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // S70 ::= S69 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S70",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // S70 ::= S69 COMA S70 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S70",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // S69 ::= LLAVE_ABIERTA S21 LLAVE_CERRADA 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//CRUD_FORMULARIO
		String tipo =  "MODIFICAR_FORMULARIO";
			if(!repetidos && ManejadorFormulario.parametrosVerificador(tipo, parametrosSolicitud))
				 {
				 int posXY [] = {(Dleft+1),(Dright+1)};
				solicitudes.add
				 	(new Solicitudes ("CRUD_FORMULARIO",tipo,datosSolicitud, parametrosSolicitud,posXY));
				 		//ManejadorFormulario.consultaFormulario
				 		//(D.toString(),datosSolicitud,parametrosSolicitud,"juan");
				 }else {
				 String parametrosObligatorios = 
				 ManejadorFormulario.parametrosObligatorios(tipo);
				 if(repetidos)parametrosObligatorios = "Parametros repetidos ";
				 reporte.agregarError("Semantico",parametrosObligatorios,(Dleft+1),(Dright+1));
				 	//System.out.println("--No agrego solicitud : CRUD_FORMULARIO --");
				 }
				 RESULT = "CRUD FORMULARIO";
				 limpiarAuxiliares();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S69",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // S11 ::= AGREGAR_COMPONENTE MAYOR_QUE S71 S8 
            {
              String RESULT =null;
		
			RESULT = "AGREGAR_COMPONENTE";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S11",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // S11 ::= ELIMINAR_COMPONENTE MAYOR_QUE S74 S8 
            {
              String RESULT =null;
		
			RESULT = "ELIMINAR_COMPONENTE";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S11",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // S11 ::= MODIFICAR_COMPONENTE MAYOR_QUE S77 S8 
            {
              String RESULT =null;
		
			RESULT = "MODIFICAR_COMPONENTE";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S11",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // S71 ::= LLAVE_ABIERTA PARAMETROS_COMPONENTE DOS_PUNTOS CORCHETE_ABIERTO S73 CORCHETE_CERRADO LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S71",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // S71 ::= error COMA S73 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S71",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // S73 ::= S72 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S73",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // S73 ::= S72 COMA S73 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S73",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // S72 ::= LLAVE_ABIERTA S23 LLAVE_CERRADA 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//CRUD_COMPONENTE 
		String tipo = "AGREGAR_COMPONENTE";
			if(!repetidos && ManejadorComponente.parametrosVerificador(tipo, datosSolicitud,parametrosSolicitud))
				 {
				 int posXY [] = {(Dleft+1),(Dright+1)};
				 solicitudes.add
				 	(new Solicitudes ("CRUD_COMPONENTE",tipo,datosSolicitud, parametrosSolicitud,posXY));
				 		//ManejadorComponente.consultaComponente
				 		//(D.toString(),datosSolicitud,parametrosSolicitud);
				 }else {
				 String parametrosObligatorios = 
				 ManejadorComponente.parametrosObligatorios(tipo);
				 if(repetidos)parametrosObligatorios = "Parametros repetidos ";
				 reporte.agregarError("Semantico",parametrosObligatorios,(Dleft+1),(Dright+1));
				 	//System.out.println("--No agrego solicitud : CRUD_COMPONENTE --");
				 }
				 RESULT = "CRUD COMPONENTE";
				 limpiarAuxiliares();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S72",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // S74 ::= LLAVE_ABIERTA PARAMETROS_COMPONENTE DOS_PUNTOS CORCHETE_ABIERTO S76 CORCHETE_CERRADO LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S74",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // S74 ::= error COMA S76 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S74",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // S76 ::= S75 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S76",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // S76 ::= S75 COMA S76 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S76",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // S75 ::= LLAVE_ABIERTA S23 LLAVE_CERRADA 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//CRUD_COMPONENTE 
		String tipo = "ELIMINAR_COMPONENTE";
			if(!repetidos && ManejadorComponente.parametrosVerificador(tipo, datosSolicitud,parametrosSolicitud))
				 {
				 int posXY [] = {(Dleft+1),(Dright+1)};
				 solicitudes.add
				 	(new Solicitudes ("CRUD_COMPONENTE",tipo,datosSolicitud, parametrosSolicitud,posXY));
				 		//ManejadorComponente.consultaComponente
				 		//(D.toString(),datosSolicitud,parametrosSolicitud);
				 }else {
				 String parametrosObligatorios = 
				 ManejadorComponente.parametrosObligatorios(tipo);
				 if(repetidos)parametrosObligatorios = "Parametros repetidos ";
				 reporte.agregarError("Semantico",parametrosObligatorios,(Dleft+1),(Dright+1));
				 	//System.out.println("--No agrego solicitud : CRUD_COMPONENTE --");
				 }
				 RESULT = "CRUD COMPONENTE";
				 limpiarAuxiliares();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S75",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // S77 ::= LLAVE_ABIERTA PARAMETROS_COMPONENTE DOS_PUNTOS CORCHETE_ABIERTO S79 CORCHETE_CERRADO LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S77",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // S77 ::= error COMA S79 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S77",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // S79 ::= S78 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S79",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // S79 ::= S78 COMA S79 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S79",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // S78 ::= LLAVE_ABIERTA S23 LLAVE_CERRADA 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//CRUD_COMPONENTE 
		String tipo = "MODIFICAR_COMPONENTE";
			if(!repetidos && ManejadorComponente.parametrosVerificador(tipo, datosSolicitud,parametrosSolicitud))
				 {
				 int posXY [] = {(Dleft+1),(Dright+1)};
				 solicitudes.add
				 	(new Solicitudes ("CRUD_COMPONENTE",tipo,datosSolicitud, parametrosSolicitud,posXY));
				 		//ManejadorComponente.consultaComponente
				 		//(D.toString(),datosSolicitud,parametrosSolicitud);
				 }else {
				 String parametrosObligatorios = 
				 ManejadorComponente.parametrosObligatorios(tipo);
				 if(repetidos)parametrosObligatorios = "Parametros repetidos ";
				 reporte.agregarError("Semantico",parametrosObligatorios,(Dleft+1),(Dright+1));
				 	//System.out.println("--No agrego solicitud : CRUD_COMPONENTE --");
				 }
				 RESULT = "CRUD COMPONENTE";
				 limpiarAuxiliares();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S78",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // S12 ::= CONSULTAR_DATOS MAYOR_QUE S7 S29 S41 S8 
            {
              Object RESULT =null;
		
	//System.out.println("formato CONSULTAR_DATOS aceptado");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S12",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // S7 ::= LLAVE_ABIERTA CONSULTAS DOS_PUNTOS CORCHETE_ABIERTO LLAVE_ABIERTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S7",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // S41 ::= LLAVE_CERRADA CORCHETE_CERRADO LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S41",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // S8 ::= MENOR_QUE FIN_SOLICITUD SIGNO_INTERROGACION MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S8",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // S13 ::= USUARIO DOS_PUNTOS cosasSinEspacios S14 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	//System.out.println("USUARIO ACEPTADO: "+D);
	agregarDatos("USUARIO",D.toString());	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S13",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // S13 ::= PASSWORD DOS_PUNTOS cosasSinEspacios S14 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	//System.out.println("PASSWORD ACEPTADO: "+D);
	agregarDatos("PASSWORD",D.toString());	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S13",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // S13 ::= S28 S14 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S13",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // S13 ::= error COMA S13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S13",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // S13 ::= error DOS_PUNTOS S13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S13",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // S14 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S14",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // S14 ::= COMA S13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S14",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // S15 ::= USUARIO_ANTIGUO DOS_PUNTOS cosasSinEspacios S16 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("USUARIO_ANTIGUO ACEPTADO: "+D);
		agregarDatos("USUARIO_ANTIGUO",D.toString());		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S15",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // S15 ::= USUARIO_NUEVO DOS_PUNTOS cosasSinEspacios S16 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("USUARIO_NUEVO ACEPTADO: "+D);
		agregarDatos("USUARIO_NUEVO",D.toString());		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S15",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // S15 ::= NUEVO_PASSWORD DOS_PUNTOS cosasSinEspacios S16 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("NUEVO_PASSWORD ACEPTADO: "+D);
		agregarDatos("NUEVO_PASSWORD",D.toString());		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S15",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // S15 ::= FECHA_MODIFICACION DOS_PUNTOS FECHA S16 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			//System.out.println("FECHA_MODIFICACION ACEPTADO: "+D);
			agregarDatos("FECHA_MODIFICACION",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S15",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // S15 ::= error COMA S15 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S15",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // S15 ::= error DOS_PUNTOS S15 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S15",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // S16 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S16",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // S16 ::= COMA S15 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S16",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // S17 ::= USUARIO DOS_PUNTOS cosasSinEspacios 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//System.out.println("USUARIO a borrar ACEPTADO: "+D);
		agregarDatos("USUARIO",D.toString());		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S17",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // S18 ::= S27 S19 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("ID ACEPTADO: "+D);
		agregarDatos("ID",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S18",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // S18 ::= TITULO DOS_PUNTOS S40 S19 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("TITULO ACEPTADO: "+D);
		agregarDatos("TITULO",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S18",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // S18 ::= NOMBRE DOS_PUNTOS cosasSinEspacios S19 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("NOMBRE ACEPTADO: "+D);
		agregarDatos("NOMBRE",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S18",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // S18 ::= TEMA DOS_PUNTOS TEMA_PARAMETRO S19 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("TEMA ACEPTADO: "+D);
		agregarDatos("TEMA",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S18",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // S18 ::= USUARIO_CREACION DOS_PUNTOS cosasSinEspacios S19 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("USUARIO_CREACION ACEPTADO: "+D);
		agregarDatos("USUARIO_CREACION",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S18",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // S18 ::= S28 S19 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S18",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // S18 ::= error COMA S18 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S18",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // S18 ::= error DOS_PUNTOS S18 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S18",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // S19 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S19",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // S19 ::= COMA S18 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S19",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // S20 ::= ID DOS_PUNTOS ID_PARAMETRO 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//System.out.println("ID eliminacion ACEPTADO: "+D);
		agregarDatos("ID",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S20",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // S21 ::= ID DOS_PUNTOS ID_PARAMETRO S22 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("ID ACEPTADO: "+D.toString());
		agregarDatos("ID",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S21",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // S21 ::= TITULO DOS_PUNTOS S40 S22 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("TITULO ACEPTADO: "+D.toString());
		agregarDatos("TITULO",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S21",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // S21 ::= NOMBRE DOS_PUNTOS cosasSinEspacios S22 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("NOMBRE ACEPTADO: "+D.toString());
		agregarDatos("NOMBRE",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S21",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // S21 ::= TEMA DOS_PUNTOS TEMA_PARAMETRO S22 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("TEMA ACEPTADO: "+D.toString());
		agregarDatos("TEMA",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S21",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // S21 ::= error COMA S21 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S21",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // S21 ::= error DOS_PUNTOS S21 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S21",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // S22 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S22",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // S22 ::= COMA S21 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S22",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // S23 ::= S27 S24 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("ID ACEPTADO: "+D.toString());
		agregarDatos("ID",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // S23 ::= NOMBRE_CAMPO DOS_PUNTOS S40 S24 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("NOMBRE_CAMPO ACEPTADO: "+D.toString());
		agregarDatos("NOMBRE_CAMPO",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // S23 ::= FORMULARIO DOS_PUNTOS ID_PARAMETRO S24 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("FORMULARIO ACEPTADO: "+D.toString());
		agregarDatos("FORMULARIO",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // S23 ::= CLASE DOS_PUNTOS CLASE_PARAMETRO S24 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("CLASE ACEPTADO: "+D.toString());
		agregarDatos("CLASE",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // S23 ::= TEXTO_VISIBLE DOS_PUNTOS S40 S24 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("TEXTO_VISIBLE ACEPTADO: "+D.toString());
		agregarDatos("TEXTO_VISIBLE",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // S23 ::= ALINEACION DOS_PUNTOS ALINEACION_PARAMETRO S24 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("ALINEACION ACEPTADO: "+D.toString());
		agregarDatos("ALINEACION",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // S23 ::= REQUERIDO DOS_PUNTOS REQUERIDO_PARAMETRO S24 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("REQUERIDO ACEPTADO: "+D.toString());
		agregarDatos("REQUERIDO",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // S23 ::= OPCIONES DOS_PUNTOS OPCIONES_PARAMETRO S24 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("OPCIONES ACEPTADO: "+D.toString());
		agregarDatos("OPCIONES",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // S23 ::= FILAS DOS_PUNTOS DIGITO S24 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("FILAS ACEPTADO: "+D.toString());
		agregarDatos("FILAS",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // S23 ::= COLUMNAS DOS_PUNTOS DIGITO S24 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("COLUMNAS ACEPTADO: "+D.toString());
		agregarDatos("COLUMNAS",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // S23 ::= URL DOS_PUNTOS cosasSinEspacios S24 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("URL ACEPTADO: "+D.toString());
		agregarDatos("URL",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // S23 ::= INDICE DOS_PUNTOS DIGITO S24 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//System.out.println("INDICE ACEPTADO: "+D.toString());
		agregarDatos("INDICE",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // S23 ::= error COMA S23 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // S23 ::= error DOS_PUNTOS S23 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S23",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // S27 ::= ID DOS_PUNTOS ID_PARAMETRO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
		RESULT = D.toString();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S27",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // S28 ::= FECHA_CREACION DOS_PUNTOS FECHA 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		agregarDatos("FECHA_CREACION",D.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S28",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // S24 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S24",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // S24 ::= COMA S23 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S24",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // S29 ::= CONSULTA DOS_PUNTOS S30 S39 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S29",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // S30 ::= SELECT TO FORM OPERADOR_REPORTE ID_PARAMETRO CORCHETE_ABIERTO S32 CORCHETE_CERRADO S34 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S30",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // S31 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S31",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // S31 ::= CUALQUIER_COSA_SIN_ESPACIOS_SIN_COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S31",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // S32 ::= S31 S33 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S32",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // S33 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S33",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // S33 ::= COMA S32 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S33",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // S34 ::= COMILLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S34",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // S34 ::= WHERE CORCHETE_ABIERTO S35 CORCHETE_CERRADO COMILLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S34",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // S35 ::= CUALQUIER_COSA_SIN_ESPACIOS_SIN_COMILLAS S38 S36 S37 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S35",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // S36 ::= DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S36",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // S36 ::= CUALQUIER_COSA_REPORTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S36",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // S37 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S37",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // S37 ::= OPERADOR_LOGICO S35 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S37",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // S38 ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S38",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // S38 ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S38",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // S38 ::= MENOR_QUE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S38",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // S38 ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S38",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // S38 ::= MAYOR_QUE IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S38",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // S38 ::= MENOR_QUE IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S38",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // S39 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S39",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // S39 ::= COMA S29 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S39",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // S40 ::= cosasSinEspacios 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S40",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // S40 ::= CUALQUIER_COSA_CON_ESPACIOS 
            {
              Object RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S40",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // cosasSinEspacios ::= CUALQUIER_COSA_SIN_ESPACIOS 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosasSinEspacios",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // cosasSinEspacios ::= reservadas 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String D = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosasSinEspacios",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // reservadas ::= MENOR_QUE 
            {
              String RESULT =null;
		RESULT = "<";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // reservadas ::= MAYOR_QUE 
            {
              String RESULT =null;
		RESULT = ">";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // reservadas ::= SIGNO_INTERROGACION 
            {
              String RESULT =null;
		RESULT = "!";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // reservadas ::= INICIO_SOLICITUD 
            {
              String RESULT =null;
		RESULT = "ini_solicitud";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // reservadas ::= FIN_SOLICITUD 
            {
              String RESULT =null;
		RESULT = "fin_solicitud";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // reservadas ::= DOS_PUNTOS 
            {
              String RESULT =null;
		RESULT = ":";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // reservadas ::= COMA 
            {
              String RESULT =null;
		RESULT = ",";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // reservadas ::= INICIO_SOLICITUDES 
            {
              String RESULT =null;
		RESULT = "ini_solicitudes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // reservadas ::= FIN_SOLICITUDES 
            {
              String RESULT =null;
		RESULT = "fin_solicitudes";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // reservadas ::= CREAR_USUARIO 
            {
              String RESULT =null;
		RESULT = "CREAR_USUARIO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // reservadas ::= LLAVE_ABIERTA 
            {
              String RESULT =null;
		RESULT = "{";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // reservadas ::= LLAVE_CERRADA 
            {
              String RESULT =null;
		RESULT = "}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // reservadas ::= CREDENCIALES_USUARIO 
            {
              String RESULT =null;
		RESULT = "CREDENCIALES_USUARIO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // reservadas ::= CORCHETE_ABIERTO 
            {
              String RESULT =null;
		RESULT = "[";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // reservadas ::= CORCHETE_CERRADO 
            {
              String RESULT =null;
		RESULT = "]";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // reservadas ::= MODIFICAR_USUARIO 
            {
              String RESULT =null;
		RESULT = "MODIFICAR_USUARIO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // reservadas ::= ELIMINAR_USUARIO 
            {
              String RESULT =null;
		RESULT = "ELIMINAR_USUARIO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // reservadas ::= LOGIN_USUARIO 
            {
              String RESULT =null;
		RESULT = "LOGIN_USUARIO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // reservadas ::= PARAMETROS_FORMULARIO 
            {
              String RESULT =null;
		RESULT = "PARAMETROS_FORMULARIO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // reservadas ::= NUEVO_FORMULARIO 
            {
              String RESULT =null;
		RESULT = "NUEVO_FORMULARIO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // reservadas ::= ELIMINAR_FORMULARIO 
            {
              String RESULT =null;
		RESULT = "ELIMINAR_FORMULARIO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // reservadas ::= MODIFICAR_FORMULARIO 
            {
              String RESULT =null;
		RESULT = "MODIFICAR_FORMULARIO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // reservadas ::= PARAMETROS_COMPONENTE 
            {
              String RESULT =null;
		RESULT = "PARAMETROS_COMPONENTE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // reservadas ::= AGREGAR_COMPONENTE 
            {
              String RESULT =null;
		RESULT = "AGREGAR_COMPONENTE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // reservadas ::= ELIMINAR_COMPONENTE 
            {
              String RESULT =null;
		RESULT = "ELIMINAR_COMPONENTE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // reservadas ::= MODIFICAR_COMPONENTE 
            {
              String RESULT =null;
		RESULT = "MODIFICAR_COMPONENTE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // reservadas ::= CONSULTAS 
            {
              String RESULT =null;
		RESULT = "CONSULTAS";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // reservadas ::= CONSULTAR_DATOS 
            {
              String RESULT =null;
		RESULT = "CONSULTAR_DATOS";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // reservadas ::= FECHA_CREACION 
            {
              String RESULT =null;
		RESULT = "FECHA_CREACION";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // reservadas ::= USUARIO 
            {
              String RESULT =null;
		RESULT = "USUARIO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // reservadas ::= PASSWORD 
            {
              String RESULT =null;
		RESULT = "PASSWORD";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // reservadas ::= ID_PARAMETRO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // reservadas ::= FECHA 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // reservadas ::= USUARIO_ANTIGUO 
            {
              String RESULT =null;
		RESULT = "USUARIO_ANTIGUO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // reservadas ::= USUARIO_NUEVO 
            {
              String RESULT =null;
		RESULT = "USUARIO_NUEVO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // reservadas ::= NUEVO_PASSWORD 
            {
              String RESULT =null;
		RESULT = "NUEVO_PASSWORD";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // reservadas ::= FECHA_MODIFICACION 
            {
              String RESULT =null;
		RESULT = "FECHA_MODIFICACION";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // reservadas ::= ID 
            {
              String RESULT =null;
		RESULT = "ID";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // reservadas ::= TITULO 
            {
              String RESULT =null;
		RESULT = "TITULO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // reservadas ::= NOMBRE 
            {
              String RESULT =null;
		RESULT = "NOMBRE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // reservadas ::= TEMA 
            {
              String RESULT =null;
		RESULT = "TEMA";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // reservadas ::= USUARIO_CREACION 
            {
              String RESULT =null;
		RESULT = "USUARIO_CREACION";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // reservadas ::= TEMA_PARAMETRO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // reservadas ::= NOMBRE_CAMPO 
            {
              String RESULT =null;
		RESULT = "NOMBRE_CAMPO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // reservadas ::= FORMULARIO 
            {
              String RESULT =null;
		RESULT = "FORMULARIO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // reservadas ::= CLASE 
            {
              String RESULT =null;
		RESULT = "CLASE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // reservadas ::= CLASE_PARAMETRO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // reservadas ::= INDICE 
            {
              String RESULT =null;
		RESULT = "INDICE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // reservadas ::= TEXTO_VISIBLE 
            {
              String RESULT =null;
		RESULT = "TEXTO_VISIBLE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // reservadas ::= ALINEACION 
            {
              String RESULT =null;
		RESULT = "ALINEACION";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // reservadas ::= ALINEACION_PARAMETRO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // reservadas ::= REQUERIDO 
            {
              String RESULT =null;
		RESULT = "REQUERIDO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // reservadas ::= REQUERIDO_PARAMETRO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // reservadas ::= OPCIONES 
            {
              String RESULT =null;
		RESULT = "OPCIONES";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // reservadas ::= OPERADOR_O 
            {
              String RESULT =null;
		RESULT = "|";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // reservadas ::= FILAS 
            {
              String RESULT =null;
		RESULT = "FILAS";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // reservadas ::= COLUMNAS 
            {
              String RESULT =null;
		RESULT = "COLUMNAS";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // reservadas ::= URL 
            {
              String RESULT =null;
		RESULT = "URL";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // reservadas ::= SELECT 
            {
              String RESULT =null;
		RESULT = "SELECT";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // reservadas ::= TO 
            {
              String RESULT =null;
		RESULT = "TO";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // reservadas ::= FORM 
            {
              String RESULT =null;
		RESULT = "FORM";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // reservadas ::= WHERE 
            {
              String RESULT =null;
		RESULT = "WHERE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // reservadas ::= IGUAL 
            {
              String RESULT =null;
		RESULT = "=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // reservadas ::= OPERADOR_LOGICO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // reservadas ::= OPERADOR_REPORTE 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // reservadas ::= GION 
            {
              String RESULT =null;
		RESULT = "-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // reservadas ::= CONSULTA 
            {
              String RESULT =null;
		RESULT = "CONSULTA";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // reservadas ::= OPCIONES_PARAMETRO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // reservadas ::= DIGITO 
            {
              String RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = D.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservadas",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
